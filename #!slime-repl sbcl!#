; SLIME 2.24
CL-USER> (asdf:load-system "hunchentoot")
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-test". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-dev". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/cl-base64-20150923-git/cl-base64.asd" contains definition for system "cl-base64-tests". Please only define "cl-base64" and secondary systems with a name starting with "cl-base64/" (e.g. "cl-base64/test") in that file.
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/cl-fad-20200325-git/cl-fad.asd" contains definition for system "cl-fad-test". Please only define "cl-fad" and secondary systems with a name starting with "cl-fad/" (e.g. "cl-fad/test") in that file.
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/cl-ppcre-20190521-git/cl-ppcre.asd" contains definition for system "cl-ppcre-test". Please only define "cl-ppcre" and secondary systems with a name starting with "cl-ppcre/" (e.g. "cl-ppcre/test") in that file.
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/flexi-streams-20200427-git/flexi-streams.asd" contains definition for system "flexi-streams-test". Please only define "flexi-streams" and secondary systems with a name starting with "flexi-streams/" (e.g. "flexi-streams/test") in that file.
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/conditions.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFCONSTANT +SSL-ERROR-NONE+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-SSL+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-WANT-READ+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-WANT-WRITE+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-WANT-X509-LOOKUP+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-SYSCALL+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-ZERO-RETURN+ ...)
; compiling (DEFCONSTANT +SSL-ERROR-WANT-CONNECT+ ...)
; compiling (DEFUN READ-SSL-ERROR-QUEUE ...)
; compiling (DEFUN FORMAT-SSL-ERROR-QUEUE ...)
; compiling (DEFINE-CONDITION CL+SSL-ERROR ...)
; compiling (DEFINE-CONDITION SSL-ERROR ...)
; compiling (DEFINE-CONDITION SSL-ERROR/HANDLE ...)
; compiling (DEFINE-CONDITION SSL-ERROR-INITIALIZE ...)
; compiling (DEFINE-CONDITION SSL-ERROR-WANT-SOMETHING ...)
; compiling (DEFINE-CONDITION SSL-ERROR-NONE ...)
; compiling (DEFINE-CONDITION SSL-ERROR-ZERO-RETURN ...)
; compiling (DEFINE-CONDITION SSL-ERROR-WANT-READ ...)
; compiling (DEFINE-CONDITION SSL-ERROR-WANT-WRITE ...)
; compiling (DEFINE-CONDITION SSL-ERROR-WANT-CONNECT ...)
; compiling (DEFINE-CONDITION SSL-ERROR-WANT-X509-LOOKUP ...)
; compiling (DEFINE-CONDITION SSL-ERROR-SYSCALL ...)
; compiling (DEFINE-CONDITION SSL-ERROR-SSL ...)
; compiling (DEFUN SSL-SIGNAL-ERROR ...)
; compiling (DEFPARAMETER *SSL-VERIFY-ERROR-ALIST* ...)
; compiling (DEFUN SSL-VERIFY-ERROR-KEYWORD ...)
; compiling (DEFUN SSL-VERIFY-ERROR-CODE ...)
; compiling (DEFINE-CONDITION SSL-ERROR-VERIFY ...)
; compiling (DEFINE-CONDITION SSL-ERROR-CALL ...)
; compiling (DEFINE-CONDITION ASN1-ERROR ...)
; compiling (DEFINE-CONDITION INVALID-ASN1-STRING ...)
; compiling (DEFINE-CONDITION SERVER-CERTIFICATE-MISSING ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/conditions-tmpGHU3ALSV.fasl
; compilation finished in 0:00:00.053
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFPARAMETER *LATE-BOUND-FOREIGN-FUNCTION-POINTERS* ...)
; compiling (DEFMACRO DEFCFUN-LATE-BOUND ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFMACRO DEFCFUN-LATE-BOUND
;     (LENGTH CL+SSL::NAME-AND-OPTIONS)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; compiling (DEFMACRO DEFCFUN-VERSIONED ...)
; compiling (DEFVAR *CL+SSL-SSL-FOREIGN-FUNCTION-NAMES* ...)
; compiling (DEFVAR *CL+SSL-CRYPTO-FOREIGN-FUNCTION-NAMES* ...)
; compiling (DEFMACRO DEFINE-SSL-FUNCTION-EX ...)
; compiling (DEFMACRO DEFINE-SSL-FUNCTION ...)
; compiling (DEFMACRO DEFINE-CRYPTO-FUNCTION-EX ...)
; compiling (DEFMACRO DEFINE-CRYPTO-FUNCTION ...)
; compiling (DEFVAR *SSL-GLOBAL-CONTEXT* ...)
; compiling (DEFVAR *SSL-GLOBAL-METHOD* ...)
; compiling (DEFVAR *BIO-LISP-METHOD* ...)
; compiling (DEFPARAMETER *BLOCKP* ...)
; compiling (DEFPARAMETER *PARTIAL-READ-P* ...)
; compiling (DEFUN SSL-INITIALIZED-P ...)
; compiling (DEFCONSTANT +SSL-FILETYPE-PEM+ ...)
; compiling (DEFCONSTANT +SSL-FILETYPE-ASN1+ ...)
; compiling (DEFCONSTANT +SSL-FILETYPE-DEFAULT+ ...)
; compiling (DEFCONSTANT +SSL-CTRL-OPTIONS+ ...)
; compiling (DEFCONSTANT +SSL_CTRL_SET_SESS_CACHE_MODE+ ...)
; compiling (DEFCONSTANT +SSL_CTRL_MODE+ ...)
; compiling (DEFCONSTANT +SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER+ ...)
; compiling (DEFCONSTANT +RSA_F4+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-OFF+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-CLIENT+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-SERVER+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-BOTH+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-NO-AUTO-CLEAR+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-NO-INTERNAL-LOOKUP+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-NO-INTERNAL-STORE+ ...)
; compiling (DEFCONSTANT +SSL-SESS-CACHE-NO-INTERNAL+ ...)
; compiling (DEFCONSTANT +SSL-VERIFY-NONE+ ...)
; compiling (DEFCONSTANT +SSL-VERIFY-PEER+ ...)
; compiling (DEFCONSTANT +SSL-VERIFY-FAIL-IF-NO-PEER-CERT+ ...)
; compiling (DEFCONSTANT +SSL-VERIFY-CLIENT-ONCE+ ...)
; compiling (DEFCONSTANT +SSL-OP-ALL+ ...)
; compiling (DEFCONSTANT +SSL-OP-NO-SSLV2+ ...)
; compiling (DEFCONSTANT +SSL-OP-NO-SSLV3+ ...)
; compiling (DEFCONSTANT +SSL-OP-NO-TLSV1+ ...)
; compiling (DEFCONSTANT +SSL-OP-NO-TLSV1-2+ ...)
; compiling (DEFCONSTANT +SSL-OP-NO-TLSV1-1+ ...)
; compiling (DEFVAR *TMP-RSA-KEY-512* ...)
; compiling (DEFVAR *TMP-RSA-KEY-1024* ...)
; compiling (DEFVAR *TMP-RSA-KEY-2048* ...)
; compiling (DEFMACRO WHILE ...)
; compiling (CFFI:DEFCFUN ("closesocket" CLOSE-SOCKET) ...)
; compiling (DECLAIM (INLINE SSL-WRITE ...))
; compiling (CFFI:DEFCTYPE SSL-METHOD ...)
; compiling (CFFI:DEFCTYPE SSL-CTX ...)
; compiling (CFFI:DEFCTYPE SSL-POINTER ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:SINCE "1.1.0") ...)
; compiling (DEFUN COMPAT-OPENSSL-VERSION ...)
; compiling (DEFUN ENCODE-OPENSSL-VERSION ...)
; compiling (DEFUN OPENSSL-IS-AT-LEAST ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN OPENSSL-IS-AT-LEAST
;     (>= (CL+SSL::COMPAT-OPENSSL-VERSION)
;         (CL+SSL::ENCODE-OPENSSL-VERSION CL+SSL::MAJOR CL+SSL::MINOR CL+SSL::PATCH
;          CL+SSL::PRERELEASE))
; --> OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> OR LET IF = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a (OR (DOUBLE-FLOAT * 8.15792463d8)
;                               (SINGLE-FLOAT * 8.1579245e8)
;                               (RATIONAL * 815792463)), not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

; compiling (DEFUN OPENSSL-IS-NOT-EVEN ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN OPENSSL-IS-NOT-EVEN
;     (< (CL+SSL::COMPAT-OPENSSL-VERSION)
;        (CL+SSL::ENCODE-OPENSSL-VERSION CL+SSL::MAJOR CL+SSL::MINOR CL+SSL::PATCH
;         CL+SSL::PRERELEASE))
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

; compiling (DEFUN LIBRESSLP ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN LIBRESSLP
;     (= 536870912 (CL+SSL::COMPAT-OPENSSL-VERSION))
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR (COMPLEX SINGLE-FLOAT)
;                                             (COMPLEX DOUBLE-FLOAT)).
; 
; note: unable to open code because: The operands might not be the same type.

; compiling (DEFINE-SSL-FUNCTION ("SSL_get_version" SSL-GET-VERSION) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("SSL_get_version" SSL-GET-VERSION)
;     (CL+SSL::DEFINE-SSL-FUNCTION ("SSL_get_version" CL+SSL::SSL-GET-VERSION)
;                                  :STRING (CL+SSL::SSL CL+SSL::SSL-POINTER))
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK LET 
; ==>
;   (CFFI:TRANSLATE-FROM-FOREIGN
;    (CFFI-SYS:%FOREIGN-FUNCALL "SSL_get_version" (:POINTER #:G0 :POINTER)
;                               :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)
;    #<CFFI::FOREIGN-STRING-TYPE :UTF-8>)
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv23_client_method"
;                                      CL+SSL::SSL-V23-CLIENT-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V23-CLIENT-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V23-CLIENT-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv23_client_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv23_server_method"
;                                      CL+SSL::SSL-V23-SERVER-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V23-SERVER-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V23-SERVER-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv23_server_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv23_method" CL+SSL::SSL-V23-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V23-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V23-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv23_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv3_client_method"
;                                      CL+SSL::SSL-V3-CLIENT-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V3-CLIENT-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V3-CLIENT-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv3_client_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv3_server_method"
;                                      CL+SSL::SSL-V3-SERVER-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V3-SERVER-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V3-SERVER-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv3_server_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSLv3_method" CL+SSL::SSL-V3-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-V3-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-V3-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "SSLv3_method" (:POINTER) :CONVENTION :CDECL
;                                    :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("TLSv1_client_method" SSL-TLSV1-CLIENT-METHOD) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("TLSv1_client_method" SSL-TLSV1-CLIENT-METHOD)
;     (CL+SSL::DEFINE-SSL-FUNCTION
;      ("TLSv1_client_method" CL+SSL::SSL-TLSV1-CLIENT-METHOD) CL+SSL::SSL-METHOD)
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-CLIENT-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-CLIENT-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_client_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("TLSv1_server_method" SSL-TLSV1-SERVER-METHOD) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("TLSv1_server_method" SSL-TLSV1-SERVER-METHOD)
;     (CL+SSL::DEFINE-SSL-FUNCTION
;      ("TLSv1_server_method" CL+SSL::SSL-TLSV1-SERVER-METHOD) CL+SSL::SSL-METHOD)
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-SERVER-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-SERVER-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_server_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("TLSv1_method" SSL-TLSV1-METHOD) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("TLSv1_method" SSL-TLSV1-METHOD)
;     (CL+SSL::DEFINE-SSL-FUNCTION ("TLSv1_method" CL+SSL::SSL-TLSV1-METHOD)
;                                  CL+SSL::SSL-METHOD)
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_method" (:POINTER) :CONVENTION :CDECL
;                                    :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_1_client_method"
;                                      CL+SSL::SSL-TLSV1-1-CLIENT-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-1-CLIENT-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-1-CLIENT-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_1_client_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_1_server_method"
;                                      CL+SSL::SSL-TLSV1-1-SERVER-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-1-SERVER-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-1-SERVER-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_1_server_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_1_method" CL+SSL::SSL-TLSV1-1-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-1-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-1-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_1_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_2_client_method"
;                                      CL+SSL::SSL-TLSV1-2-CLIENT-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-2-CLIENT-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-2-CLIENT-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_2_client_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_2_server_method"
;                                      CL+SSL::SSL-TLSV1-2-SERVER-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-2-SERVER-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-2-SERVER-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_2_server_method" (:POINTER)
;                                    :CONVENTION :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.0.2")
;                                     ("TLSv1_2_method" CL+SSL::SSL-TLSV1-2-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-TLSV1-2-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-TLSV1-2-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLSv1_2_method" (:POINTER) :CONVENTION
;                                    :CDECL :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:SINCE "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:SINCE "1.1.0")
;                                     ("TLS_method" CL+SSL::TLS-METHOD)
;                                     CL+SSL::SSL-METHOD)
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::TLS-METHOD
;         NIL
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::TLS-METHOD
;         (CFFI-SYS:%FOREIGN-FUNCALL "TLS_method" (:POINTER) :CONVENTION :CDECL
;                                    :LIBRARY CL+SSL::LIBSSL)))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_new" SSL-CTX-NEW) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("SSL_CTX_new" SSL-CTX-NEW)
;     (CL+SSL::DEFINE-SSL-FUNCTION ("SSL_CTX_new" CL+SSL::SSL-CTX-NEW)
;                                  CL+SSL::SSL-CTX (METHOD CL+SSL::SSL-METHOD))
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-CTX-NEW
;         (METHOD)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-CTX-NEW
;         (LET ((#:G0 METHOD))
;           (CFFI-SYS:%FOREIGN-FUNCALL "SSL_CTX_new" (:POINTER #:G0 :POINTER)
;                                      :CONVENTION :CDECL :LIBRARY
;                                      CL+SSL::LIBSSL))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("SSL_new" SSL-NEW) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION ("SSL_new" SSL-NEW)
;     (CL+SSL::DEFINE-SSL-FUNCTION ("SSL_new" CL+SSL::SSL-NEW) CL+SSL::SSL-POINTER
;                                  (CL+SSL::CTX CL+SSL::SSL-CTX))
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-NEW
;         (CL+SSL::CTX)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-NEW
;         (LET ((#:G0 CL+SSL::CTX))
;           (CFFI-SYS:%FOREIGN-FUNCALL "SSL_new" (:POINTER #:G0 :POINTER)
;                                      :CONVENTION :CDECL :LIBRARY
;                                      CL+SSL::LIBSSL))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("SSL_get_fd" SSL-GET-FD) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_set_fd" SSL-SET-FD) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_set_bio" SSL-SET-BIO) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_get_error" SSL-GET-ERROR) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_set_connect_state" SSL-SET-CONNECT-STATE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_set_accept_state" SSL-SET-ACCEPT-STATE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_connect" SSL-CONNECT) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_accept" SSL-ACCEPT) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_write" SSL-WRITE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_read" SSL-READ) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_shutdown" SSL-SHUTDOWN) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_free" SSL-FREE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_free" SSL-CTX-FREE) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("BIO_ctrl" BIO-SET-FD) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("BIO_new_socket" BIO-NEW-SOCKET) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("BIO_new_socket" BIO-NEW-SOCKET)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("BIO_new_socket" CL+SSL::BIO-NEW-SOCKET)
;                                     :POINTER (CL+SSL::FD :INT)
;                                     (CL+SSL::CLOSE-FLAG :INT))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::BIO-NEW-SOCKET
;         (CL+SSL::FD CL+SSL::CLOSE-FLAG)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::BIO-NEW-SOCKET
;         (LET ((#:G0 CL+SSL::FD))
;           (LET (#)
;             (CFFI-SYS:%FOREIGN-FUNCALL "BIO_new_socket" # :CONVENTION :CDECL
;                                        :LIBRARY :DEFAULT)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("BIO_new" BIO-NEW) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("BIO_new" BIO-NEW)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("BIO_new" CL+SSL::BIO-NEW) :POINTER
;                                     (METHOD :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::BIO-NEW
;         (METHOD)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::BIO-NEW
;         (LET ((#:G0 METHOD))
;           (CFFI-SYS:%FOREIGN-FUNCALL "BIO_new" (:POINTER #:G0 :POINTER)
;                                      :CONVENTION :CDECL :LIBRARY :DEFAULT))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("ERR_get_error" ERR-GET-ERROR) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("ERR_error_string" ERR-ERROR-STRING) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("ERR_error_string" ERR-ERROR-STRING)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("ERR_error_string" CL+SSL::ERR-ERROR-STRING)
;                                     :STRING (CL+SSL::E :UNSIGNED-LONG)
;                                     (CL+SSL::BUF :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA FUNCTION BLOCK LET LET 
; ==>
;   (CFFI:TRANSLATE-FROM-FOREIGN
;    (CFFI-SYS:%FOREIGN-FUNCALL "ERR_error_string"
;                               (:UNSIGNED-LONG #:G0 :POINTER #:G1 :POINTER)
;                               :CONVENTION :CDECL :LIBRARY :DEFAULT)
;    #<CFFI::FOREIGN-STRING-TYPE :UTF-8>)
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFINE-SSL-FUNCTION ("SSL_set_cipher_list" SSL-SET-CIPHER-LIST) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_use_RSAPrivateKey_file" SSL-USE-RSA-PRIVATEKEY-FILE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_use_RSAPrivateKey_file" SSL-CTX-USE-RSA-PRIVATEKEY-FILE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_use_PrivateKey_file" SSL-USE-PRIVATEKEY-FILE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_use_PrivateKey_file" SSL-CTX-USE-PRIVATEKEY-FILE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_use_certificate_file" SSL-USE-CERTIFICATE-FILE) ...)
; compiling (DEFUN SSL-CTX-SET-OPTIONS ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN SSL-CTX-SET-OPTIONS
;     (CL+SSL::SSL-CTX-CTRL CL+SSL::CTX CL+SSL::+SSL-CTRL-OPTIONS+ CL+SSL::OPTIONS
;      (CFFI-SYS:NULL-POINTER))
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_cipher_list" SSL-CTX-SET-CIPHER-LIST%) ...)
; compiling (DEFUN SSL-CTX-SET-CIPHER-LIST ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_use_certificate_chain_file" SSL-CTX-USE-CERTIFICATE-CHAIN-FILE) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_load_verify_locations" SSL-CTX-LOAD-VERIFY-LOCATIONS) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_client_CA_list" SSL-CTX-SET-CLIENT-CA-LIST) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_load_client_CA_file" SSL-LOAD-CLIENT-CA-FILE) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in:
;      DEFINE-SSL-FUNCTION ("SSL_load_client_CA_file" SSL-LOAD-CLIENT-CA-FILE)
;     (CL+SSL::DEFINE-SSL-FUNCTION
;      ("SSL_load_client_CA_file" CL+SSL::SSL-LOAD-CLIENT-CA-FILE)
;      CL+SSL::SSL-POINTER (CL+SSL::FILE :STRING))
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-LOAD-CLIENT-CA-FILE
;         (CL+SSL::FILE)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-LOAD-CLIENT-CA-FILE
;         (MULTIPLE-VALUE-BIND (#:G0 #:PARAM1)
;             (CFFI:TRANSLATE-TO-FOREIGN CL+SSL::FILE
;                                        #<CFFI::FOREIGN-STRING-TYPE :UTF-8>)
;           (UNWIND-PROTECT (PROGN #)
;             (CFFI:FREE-TRANSLATED-OBJECT #:G0 # #:PARAM1)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_ctrl" SSL-CTX-CTRL) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_ctrl" SSL-CTRL) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_default_passwd_cb" SSL-CTX-SET-DEFAULT-PASSWD-CB) ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("RAND_seed" RAND-SEED) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("RAND_bytes" RAND-BYTES) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_verify_depth" SSL-CTX-SET-VERIFY-DEPTH) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_verify" SSL-CTX-SET-VERIFY) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_get_verify_result" SSL-GET-VERIFY-RESULT) ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_get_peer_certificate" SSL-GET-PEER-CERTIFICATE) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in:
;      DEFINE-SSL-FUNCTION ("SSL_get_peer_certificate" SSL-GET-PEER-CERTIFICATE)
;     (CL+SSL::DEFINE-SSL-FUNCTION
;      ("SSL_get_peer_certificate" CL+SSL::SSL-GET-PEER-CERTIFICATE) :POINTER
;      (CL+SSL::SSL CL+SSL::SSL-POINTER))
; --> CL+SSL::DEFINE-SSL-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-GET-PEER-CERTIFICATE
;         (CL+SSL::SSL)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-GET-PEER-CERTIFICATE
;         (LET ((#:G0 CL+SSL::SSL))
;           (CFFI-SYS:%FOREIGN-FUNCALL "SSL_get_peer_certificate"
;                                      (:POINTER #:G0 :POINTER) :CONVENTION
;                                      :CDECL :LIBRARY CL+SSL::LIBSSL))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_free" X509-FREE) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("X509_NAME_oneline" X509-NAME-ONELINE) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("X509_NAME_oneline" X509-NAME-ONELINE)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION
;      ("X509_NAME_oneline" CL+SSL::X509-NAME-ONELINE) :POINTER
;      (CL+SSL::X509-NAME :POINTER) (CL+SSL::BUF :POINTER) (CL+SSL::SIZE :INT))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-NAME-ONELINE
;         (CL+SSL::X509-NAME CL+SSL::BUF CL+SSL::SIZE)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-NAME-ONELINE
;         (LET ((#:G0 CL+SSL::X509-NAME))
;           (LET (#)
;             (LET #
;               #)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_NAME_get_index_by_NID" X509-NAME-GET-INDEX-BY-NID) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("X509_NAME_get_entry" X509-NAME-GET-ENTRY) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("X509_NAME_get_entry" X509-NAME-GET-ENTRY)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION
;      ("X509_NAME_get_entry" CL+SSL::X509-NAME-GET-ENTRY) :POINTER
;      (CL+SSL::NAME :POINTER) (LOG :INT))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-NAME-GET-ENTRY
;         (CL+SSL::NAME LOG)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-NAME-GET-ENTRY
;         (LET ((#:G0 CL+SSL::NAME))
;           (LET (#)
;             (CFFI-SYS:%FOREIGN-FUNCALL "X509_NAME_get_entry" # :CONVENTION
;                                        :CDECL :LIBRARY :DEFAULT)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_NAME_ENTRY_get_data" X509-NAME-ENTRY-GET-DATA) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in:
;      DEFINE-CRYPTO-FUNCTION ("X509_NAME_ENTRY_get_data" X509-NAME-ENTRY-GET-DATA)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION
;      ("X509_NAME_ENTRY_get_data" CL+SSL::X509-NAME-ENTRY-GET-DATA) :POINTER
;      (CL+SSL::NAME-ENTRY :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-NAME-ENTRY-GET-DATA
;         (CL+SSL::NAME-ENTRY)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-NAME-ENTRY-GET-DATA
;         (LET ((#:G0 CL+SSL::NAME-ENTRY))
;           (CFFI-SYS:%FOREIGN-FUNCALL "X509_NAME_ENTRY_get_data"
;                                      (:POINTER #:G0 :POINTER) :CONVENTION
;                                      :CDECL :LIBRARY :DEFAULT))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_get_issuer_name" X509-GET-ISSUER-NAME) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in:
;      DEFINE-CRYPTO-FUNCTION ("X509_get_issuer_name" X509-GET-ISSUER-NAME)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION
;      ("X509_get_issuer_name" CL+SSL::X509-GET-ISSUER-NAME) :POINTER
;      (CL+SSL::X509 :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-GET-ISSUER-NAME
;         (CL+SSL::X509)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-GET-ISSUER-NAME
;         (LET ((#:G0 CL+SSL::X509))
;           (CFFI-SYS:%FOREIGN-FUNCALL "X509_get_issuer_name"
;                                      (:POINTER #:G0 :POINTER) :CONVENTION
;                                      :CDECL :LIBRARY :DEFAULT))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_get_subject_name" X509-GET-SUBJECT-NAME) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in:
;      DEFINE-CRYPTO-FUNCTION ("X509_get_subject_name" X509-GET-SUBJECT-NAME)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION
;      ("X509_get_subject_name" CL+SSL::X509-GET-SUBJECT-NAME) :POINTER
;      (CL+SSL::X509 :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-GET-SUBJECT-NAME
;         (CL+SSL::X509)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-GET-SUBJECT-NAME
;         (LET ((#:G0 CL+SSL::X509))
;           (CFFI-SYS:%FOREIGN-FUNCALL "X509_get_subject_name"
;                                      (:POINTER #:G0 :POINTER) :CONVENTION
;                                      :CDECL :LIBRARY :DEFAULT))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_get_ext_d2i" X509-GET-EXT-D2I) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("X509_get_ext_d2i" X509-GET-EXT-D2I)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("X509_get_ext_d2i" CL+SSL::X509-GET-EXT-D2I)
;                                     :POINTER (CL+SSL::CERT :POINTER)
;                                     (CL+SSL::NID :INT) (CL+SSL::CRIT :POINTER)
;                                     (CL+SSL::IDX :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::X509-GET-EXT-D2I
;         (CL+SSL::CERT CL+SSL::NID CL+SSL::CRIT CL+SSL::IDX)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::X509-GET-EXT-D2I
;         (LET ((#:G0 CL+SSL::CERT))
;           (LET (#)
;             (LET #
;               #)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("X509_STORE_CTX_get_error" X509-STORE-CTX-GET-ERROR) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("d2i_X509" D2I-X509) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("d2i_X509" D2I-X509)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("d2i_X509" CL+SSL::D2I-X509) :POINTER
;                                     (CL+SSL::*PX :POINTER) (CL+SSL::IN :POINTER)
;                                     (CL+SSL::LEN :INT))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::D2I-X509
;         (CL+SSL::*PX CL+SSL::IN CL+SSL::LEN)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::D2I-X509
;         (LET ((#:G0 CL+SSL::*PX))
;           (LET (#)
;             (LET #
;               #)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFCONSTANT +GEN-OTHERNAME+ ...)
; compiling (DEFCONSTANT +GEN-EMAIL+ ...)
; compiling (DEFCONSTANT +GEN-DNS+ ...)
; compiling (DEFCONSTANT +GEN-X400+ ...)
; compiling (DEFCONSTANT +GEN-DIRNAME+ ...)
; compiling (DEFCONSTANT +GEN-EDIPARTY+ ...)
; compiling (DEFCONSTANT +GEN-URI+ ...)
; compiling (DEFCONSTANT +GEN-IPADD+ ...)
; compiling (DEFCONSTANT +GEN-RID+ ...)
; compiling (DEFCONSTANT +V-ASN1-OCTET-STRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-UTF8STRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-PRINTABLESTRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-TELETEXSTRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-IASTRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-UNIVERSALSTRING+ ...)
; compiling (DEFCONSTANT +V-ASN1-BMPSTRING+ ...)
; compiling (DEFCONSTANT +NID-SUBJECT-ALT-NAME+ ...)
; compiling (DEFCONSTANT +NID-COMMONNAME+ ...)
; compiling (CFFI:DEFCSTRUCT GENERAL-NAME ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0")
;                                        ("sk_value" CL+SSL::SK-VALUE) :POINTER
;                                        (CL+SSL::STACK :POINTER)
;                                        (CL+SSL::INDEX :INT))
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SK-VALUE
;         (CL+SSL::STACK CL+SSL::INDEX)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SK-VALUE
;         (LET ((#:G0 CL+SSL::STACK))
;           (LET (#)
;             (CFFI-SYS:%FOREIGN-FUNCALL "sk_value" # :CONVENTION :CDECL :LIBRARY
;                                        :DEFAULT)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION-EX (:VANISHED "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION-EX (:SINCE "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION-EX (:SINCE "1.1.0")
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION-EX (:SINCE "1.1.0")
;                                        ("OPENSSL_sk_value"
;                                         CL+SSL::OPENSSL-SK-VALUE)
;                                        :POINTER (CL+SSL::STACK :POINTER)
;                                        (CL+SSL::INDEX :INT))
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::OPENSSL-SK-VALUE
;         (CL+SSL::STACK CL+SSL::INDEX)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::OPENSSL-SK-VALUE
;         (LET ((#:G0 CL+SSL::STACK))
;           (LET (#)
;             (CFFI-SYS:%FOREIGN-FUNCALL "OPENSSL_sk_value" # :CONVENTION :CDECL
;                                        :LIBRARY :DEFAULT)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION-EX (:SINCE "1.1.0") ...)
; compiling (DECLAIM (FTYPE # ...))
; compiling (DEFUN SK-GENERAL-NAME-VALUE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN SK-GENERAL-NAME-VALUE
;     (DEFUN CL+SSL::SK-GENERAL-NAME-VALUE (CL+SSL::NAMES CL+SSL::INDEX)
;       (IF (AND (NOT (CL+SSL::LIBRESSLP)) (CL+SSL::OPENSSL-IS-AT-LEAST 1 1))
;           (CL+SSL::OPENSSL-SK-VALUE CL+SSL::NAMES CL+SSL::INDEX)
;           (CL+SSL::SK-VALUE CL+SSL::NAMES CL+SSL::INDEX)))
; --> PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SK-GENERAL-NAME-VALUE
;         (CL+SSL::NAMES CL+SSL::INDEX)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SK-GENERAL-NAME-VALUE
;         (IF (AND (NOT #) (CL+SSL::OPENSSL-IS-AT-LEAST 1 1))
;             (CL+SSL::OPENSSL-SK-VALUE CL+SSL::NAMES CL+SSL::INDEX)
;             (CL+SSL::SK-VALUE CL+SSL::NAMES CL+SSL::INDEX))))
; 
; note: type assertion too complex to check:
; (VALUES SB-SYS:SYSTEM-AREA-POINTER &REST T).

; compiling (DECLAIM (FTYPE # ...))
; compiling (DEFUN SK-GENERAL-NAME-NUM ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN SK-GENERAL-NAME-NUM
;     (DEFUN CL+SSL::SK-GENERAL-NAME-NUM (CL+SSL::NAMES)
;       (IF (AND (NOT (CL+SSL::LIBRESSLP)) (CL+SSL::OPENSSL-IS-AT-LEAST 1 1))
;           (CL+SSL::OPENSSL-SK-NUM CL+SSL::NAMES)
;           (CL+SSL::SK-NUM CL+SSL::NAMES)))
; --> PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SK-GENERAL-NAME-NUM
;         (CL+SSL::NAMES)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SK-GENERAL-NAME-NUM
;         (IF (AND (NOT #) (CL+SSL::OPENSSL-IS-AT-LEAST 1 1))
;             (CL+SSL::OPENSSL-SK-NUM CL+SSL::NAMES)
;             (CL+SSL::SK-NUM CL+SSL::NAMES))))
; 
; note: type assertion too complex to check:
; (VALUES FIXNUM &REST T).

; compiling (DEFINE-CRYPTO-FUNCTION ("GENERAL_NAMES_free" GENERAL-NAMES-FREE) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("ASN1_STRING_data" ASN1-STRING-DATA) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("ASN1_STRING_data" ASN1-STRING-DATA)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("ASN1_STRING_data" CL+SSL::ASN1-STRING-DATA)
;                                     :POINTER (CL+SSL::ASN1-STRING :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::ASN1-STRING-DATA
;         (CL+SSL::ASN1-STRING)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::ASN1-STRING-DATA
;         (LET ((#:G0 CL+SSL::ASN1-STRING))
;           (CFFI-SYS:%FOREIGN-FUNCALL "ASN1_STRING_data"
;                                      (:POINTER #:G0 :POINTER) :CONVENTION
;                                      :CDECL :LIBRARY :DEFAULT))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("ASN1_STRING_length" ASN1-STRING-LENGTH) ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("ASN1_STRING_type" ASN1-STRING-TYPE) ...)
; compiling (CFFI:DEFCSTRUCT ASN1_STRING_ST ...)
; compiling (DEFINE-SSL-FUNCTION ("SSL_CTX_set_default_verify_paths" SSL-CTX-SET-DEFAULT-VERIFY-PATHS) ...)
; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.1.0") ...)
; compiling (DEFINE-SSL-FUNCTION-EX (:SINCE "1.1.0") ...)
; compiling (DEFINE-CRYPTO-FUNCTION ("RSA_generate_key" RSA-GENERATE-KEY) ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-CRYPTO-FUNCTION ("RSA_generate_key" RSA-GENERATE-KEY)
;     (CL+SSL::DEFINE-CRYPTO-FUNCTION ("RSA_generate_key" CL+SSL::RSA-GENERATE-KEY)
;                                     :POINTER (CL+SSL::NUM :INT)
;                                     (CL+SSL::E :UNSIGNED-LONG)
;                                     (CL+SSL::CALLBACK :POINTER)
;                                     (CL+SSL::OPT :POINTER))
; --> CL+SSL::DEFINE-CRYPTO-FUNCTION-EX PROGN CL+SSL::DEFCFUN-VERSIONED 
; --> CFFI:DEFCFUN PROGN DEFUN PROGN SB-IMPL::%DEFUN SB-IMPL::%DEFUN 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::RSA-GENERATE-KEY
;         (CL+SSL::NUM CL+SSL::E CL+SSL::CALLBACK CL+SSL::OPT)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::RSA-GENERATE-KEY
;         (LET ((#:G0 CL+SSL::NUM))
;           (LET (#)
;             (LET #
;               #)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (DEFINE-CRYPTO-FUNCTION ("RSA_free" RSA-FREE) ...)
; compiling (DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0") ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;     (CL+SSL::DEFINE-SSL-FUNCTION-EX (:VANISHED "1.1.0")
;                                     ("SSL_CTX_set_tmp_rsa_callback"
;                                      CL+SSL::SSL-CTX-SET-TMP-RSA-CALLBACK)
;                                     :POINTER (CL+SSL::CTX :POINTER)
;                                     (CL+SSL::CALLBACK :POINTER))
; --> PROGN CL+SSL::DEFCFUN-VERSIONED CFFI:DEFCFUN PROGN DEFUN PROGN 
; --> SB-IMPL::%DEFUN SB-IMPL::%DEFUN SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA CL+SSL::SSL-CTX-SET-TMP-RSA-CALLBACK
;         (CL+SSL::CTX CL+SSL::CALLBACK)
;       (DECLARE (SB-C::TOP-LEVEL-FORM))
;       (BLOCK CL+SSL::SSL-CTX-SET-TMP-RSA-CALLBACK
;         (LET ((#:G0 CL+SSL::CTX))
;           (LET (#)
;             (CFFI-SYS:%FOREIGN-FUNCALL "SSL_CTX_set_tmp_rsa_callback" #
;                                        :CONVENTION :CDECL :LIBRARY
;                                        CL+SSL::LIBSSL)))))
; 
; note: doing SAP to pointer coercion (cost 20) to "<return value>"

; compiling (CFFI:DEFCALLBACK TMP-RSA-CALLBACK ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: CFFI:DEFCALLBACK TMP-RSA-CALLBACK
;     (= CL+SSL::KEY-LENGTH 512)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR (COMPLEX SINGLE-FLOAT)
;                                             (COMPLEX DOUBLE-FLOAT)).
; 
; note: unable to open code because: The operands might not be the same type.

;     (= CL+SSL::KEY-LENGTH 1024)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR (COMPLEX SINGLE-FLOAT)
;                                             (COMPLEX DOUBLE-FLOAT)).
; 
; note: unable to open code because: The operands might not be the same type.

;     (CL+SSL::RSA-GENERATE-KEY LENGTH CL+SSL::+RSA_F4+ (CFFI-SYS:NULL-POINTER)
;      (CFFI-SYS:NULL-POINTER))
; 
; note: doing SAP to pointer coercion (cost 20)
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFVAR *SOCKET*)
; compiling (DECLAIM (INLINE ENSURE-SSL-FUNCALL))
; compiling (DEFUN ENSURE-SSL-FUNCALL ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN ENSURE-SSL-FUNCALL
;     (APPLY CL+SSL::FUNC CL+SSL::ARGS)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-FOR-CALL CL+SSL::FUNC)
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   FUNC is not known to be a function

;     (PLUSP CL+SSL::NBYTES)
; ==>
;   (> CL+SSL::NBYTES 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       etc.

; compiling (DECLAIM (INLINE NONBLOCKING-SSL-FUNCALL))
; compiling (DEFUN NONBLOCKING-SSL-FUNCALL ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN NONBLOCKING-SSL-FUNCALL
;     (APPLY CL+SSL::FUNC CL+SSL::ARGS)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-FOR-CALL CL+SSL::FUNC)
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   FUNC is not known to be a function

;     (PLUSP CL+SSL::NBYTES)
; ==>
;   (> CL+SSL::NBYTES 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       etc.

; compiling (DEFUN OUTPUT-WAIT ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN OUTPUT-WAIT
;     (/ (- CL+SSL::DEADLINE (GET-INTERNAL-REAL-TIME))
;        INTERNAL-TIME-UNITS-PER-SECOND)
; 
; note: unable to
;   convert x/2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.

;     (- CL+SSL::DEADLINE (GET-INTERNAL-REAL-TIME))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (NOT NULL), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 4) because:
;       The first argument is a (NOT NULL), not a (SIGNED-BYTE 64).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                                &REST T).
;       etc.

; compiling (DEFUN INPUT-WAIT ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN INPUT-WAIT
;     (/ (- CL+SSL::DEADLINE (GET-INTERNAL-REAL-TIME))
;        INTERNAL-TIME-UNITS-PER-SECOND)
; 
; note: unable to
;   convert x/2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.

;     (- CL+SSL::DEADLINE (GET-INTERNAL-REAL-TIME))
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (NOT NULL), not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 4) because:
;       The first argument is a (NOT NULL), not a (SIGNED-BYTE 64).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                                &REST T).
;       etc.

; compiling (DEFVAR *PEM-PASSWORD* ...)
; compiling (CFFI:DEFCALLBACK PEM-PASSWORD-CALLBACK ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: CFFI:DEFCALLBACK PEM-PASSWORD-CALLBACK
;     (COERCE CL+SSL::*PEM-PASSWORD* 'BASE-STRING)
; --> THE IF REPLACE MAKE-ARRAY 
; ==>
;   (LENGTH SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR CONS NULL (AND (NOT BASE-STRING) VECTOR)
;                               SB-KERNEL:EXTENDED-SEQUENCE), not a VECTOR.

; --> THE IF 
; ==>
;   (REPLACE (MAKE-ARRAY (LENGTH SB-C::X) :ELEMENT-TYPE 'BASE-CHAR) SB-C::X)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The second argument is a (OR CONS NULL (AND (NOT BASE-STRING) VECTOR)
;                                SB-KERNEL:EXTENDED-SEQUENCE), not a (SIMPLE-ARRAY
;                                                                     CHARACTER
;                                                                     (*)).

; compiling (DEFMACRO WITH-PEM-PASSWORD ...)
; compiling (DEFUN INIT-PRNG ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN INIT-PRNG
;     (LENGTH CL+SSL::SEED-BYTE-SEQUENCE)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (ELT CL+SSL::SEED-BYTE-SEQUENCE CL+SSL::I)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (CL+SSL::RAND-SEED CL+SSL::PTR LENGTH)
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFUN SSL-CTX-SET-SESSION-CACHE-MODE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN SSL-CTX-SET-SESSION-CACHE-MODE
;     (CL+SSL::SSL-CTX-CTRL CL+SSL::CTX CL+SSL::+SSL_CTRL_SET_SESS_CACHE_MODE+
;      CL+SSL::MODE (CFFI-SYS:NULL-POINTER))
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFUN SSL-SET-TLSEXT-HOST-NAME ...)
; compiling (DEFVAR *LOCKS*)
; compiling (DEFCONSTANT +CRYPTO-LOCK+ ...)
; compiling (DEFCONSTANT +CRYPTO-UNLOCK+ ...)
; compiling (DEFCONSTANT +CRYPTO-READ+ ...)
; compiling (DEFCONSTANT +CRYPTO-WRITE+ ...)
; compiling (CFFI:DEFCALLBACK LOCKING-CALLBACK ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: CFFI:DEFCALLBACK LOCKING-CALLBACK
;     (ELT CL+SSL::*LOCKS* CL+SSL::N)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

; compiling (DEFVAR *THREADS* ...)
; compiling (DEFVAR *THREAD-COUNTER* ...)
; compiling (DEFPARAMETER *GLOBAL-LOCK* ...)
; compiling (CFFI:DEFCALLBACK THREADID-CALLBACK ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: CFFI:DEFCALLBACK THREADID-CALLBACK
;     (INCF CL+SSL::*THREAD-COUNTER*)
; --> SETQ THE 
; ==>
;   (+ 1 CL+SSL::*THREAD-COUNTER*)
; 
; note: unable to
;   associate +/(+ -) of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFVAR *SSL-CHECK-VERIFY-P* ...)
; compiling (DEFUN DEFAULT-SSL-METHOD ...)
; compiling (DEFUN INITIALIZE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi.lisp
; in: DEFUN INITIALIZE
;     (FUNCALL (OR METHOD (CL+SSL::DEFAULT-SSL-METHOD)))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-FOR-CALL (OR METHOD (CL+SSL::DEFAULT-SSL-METHOD)))
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   callable expression is not known to be a function

; compiling (DEFUN ENSURE-INITIALIZED ...)
; compiling (DEFUN USE-CERTIFICATE-CHAIN-FILE ...)
; compiling (DEFUN RELOAD ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi-tmpAAURSO1.fasl
; compilation finished in 0:00:00.342
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/x509.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFGENERIC DECODE-ASN1-STRING ...)
; compiling (DEFUN COPY-BYTES-TO-LISP-VECTOR ...)
; compiling (DEFUN ASN1-STRING-BYTES-VECTOR ...)
; compiling (DEFUN ASN1-IASTRING-CHAR-P ...)
; compiling (DEFUN ASN1-IASTRING-P ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFUN ASN1-PRINTABLE-CHAR-P ...)
; compiling (DEFUN ASN1-PRINTABLE-STRING-P ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFUN ASN1-TELETEX-CHAR-P ...)
; compiling (DEFUN ASN1-TELETEX-STRING-P ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFMETHOD DECODE-ASN1-STRING ...)
; compiling (DEFUN TRY-GET-ASN1-STRING-DATA ...)
; compiling (DEFUN SLURP-STREAM ...)
; compiling (DEFGENERIC DECODE-CERTIFICATE ...)
; compiling (DEFMETHOD DECODE-CERTIFICATE ...)
; compiling (DEFUN CERT-FORMAT-FROM-PATH ...)
; compiling (DEFUN DECODE-CERTIFICATE-FROM-FILE ...)
; compiling (DEFUN CERTIFICATE-ALT-NAMES ...)
; compiling (DEFUN CERTIFICATE-DNS-ALT-NAMES ...)
; compiling (DEFUN CERTIFICATE-SUBJECT-COMMON-NAMES ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/x509-tmp5GEXGEG5.fasl
; compilation finished in 0:00:00.041
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi-buffer-all.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFCONSTANT +INITIAL-BUFFER-SIZE+ ...)
; compiling (DECLAIM (INLINE MAKE-BUFFER ...))

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi-buffer-all-tmpAR3FSGEY.fasl
; compilation finished in 0:00:00.003
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi-buffer.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFUN MAKE-BUFFER ...)
; compiling (DEFUN BUFFER-LENGTH ...)
; compiling (DEFUN BUFFER-ELT ...)
; compiling (DEFUN SET-BUFFER-ELT ...)
; compiling (DEFSETF BUFFER-ELT ...)
; compiling (DEFUN S/B-REPLACE ...)
; compiling (DEFUN B/S-REPLACE ...)
; compiling (DEFMACRO WITH-POINTER-TO-VECTOR-DATA ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/ffi-buffer-tmpJAIDFZTC.fasl
; compilation finished in 0:00:00.010
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFVAR *DEFAULT-CIPHER-LIST* ...)
; compiling (DEFCLASS SSL-STREAM ...)
; compiling (DEFMETHOD PRINT-OBJECT ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD PRINT-OBJECT (SSL-STREAM T)
;     (FORMAT STREAM "for ~A" (CL+SSL::SSL-STREAM-SOCKET CL+SSL::OBJECT))
; ==>
;   (FORMAT SB-C::DEST
;           (SB-INT:NAMED-LAMBDA "fmt$for ~A"
;               (STREAM SB-FORMAT::FORMAT-ARG1 &REST SB-FORMAT::ARGS)
;             (DECLARE (IGNORABLE STREAM SB-FORMAT::ARGS))
;             (BLOCK NIL
;               (WRITE-STRING "for " STREAM)
;               (PRINC SB-FORMAT::FORMAT-ARG1 STREAM))
;             NIL)
;           #:G8)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR BOOLEAN STREAM (VECTOR CHARACTER) (VECTOR NIL)
;                               BASE-STRING), not a STREAM.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR BOOLEAN STREAM (VECTOR CHARACTER) (VECTOR NIL)
;                               BASE-STRING), not a (MEMBER T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR BOOLEAN STREAM (VECTOR CHARACTER) (VECTOR NIL)
;                               BASE-STRING), not a NULL.

; compiling (DEFCLASS SSL-SERVER-STREAM ...)
; compiling (DEFMETHOD STREAM-ELEMENT-TYPE ...)
; compiling (DEFMETHOD CLOSE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD CLOSE (SSL-STREAM)
;     (FUNCALL (CL+SSL::SSL-CLOSE-CALLBACK STREAM))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-FOR-CALL (CL+SSL::SSL-CLOSE-CALLBACK STREAM))
; 
; note: unable to
;   optimize away possible call to FDEFINITION at runtime
; because:
;   callable expression is not known to be a function

; compiling (DEFMETHOD OPEN-STREAM-P ...)
; compiling (DEFMETHOD STREAM-LISTEN ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-LISTEN (SSL-STREAM)
;     (CL+SSL::BUFFER-ELT CL+SSL::BUF 0)
; --> BLOCK ELT AREF 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

; compiling (DEFMETHOD STREAM-READ-BYTE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-READ-BYTE (SSL-STREAM)
;     (CL+SSL::BUFFER-ELT CL+SSL::BUF 0)
; --> BLOCK ELT AREF 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF/CHECK-BOUNDS ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; because:
;   Upgraded element type of array is not known at compile time.

; compiling (DEFMETHOD STREAM-READ-SEQUENCE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-READ-SEQUENCE (SSL-STREAM T T T)
;     (PLUSP LENGTH)
; ==>
;   (> LENGTH 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (< CL+SSL::START CL+SSL::END)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (SETF (ELT CL+SSL::SEQ CL+SSL::START) (CL+SSL::SSL-STREAM-PEEKED-BYTE STREAM))
; ==>
;   (SB-KERNEL:%SETELT CL+SSL::SEQ CL+SSL::START
;                      (CL+SSL::SSL-STREAM-PEEKED-BYTE STREAM))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (CL+SSL::BUFFER-LENGTH CL+SSL::BUF)
; --> BLOCK 
; ==>
;   (LENGTH CL+SSL::BUF)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (CL+SSL::S/B-REPLACE CL+SSL::SEQ CL+SSL::BUF :START1 CL+SSL::START :END1
;                          (+ CL+SSL::START CL+SSL::READ-BYTES))
; --> BLOCK 
; ==>
;   (REPLACE CL+SSL::SEQ CL+SSL::BUF :START1 CL+SSL::START1 :END1 CL+SSL::END1
;            :START2 CL+SSL::START2 :END2 CL+SSL::END2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        SINGLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        DOUBLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a SIMPLE-BIT-VECTOR.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BIT-VECTOR
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 2) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 4) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 7) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 15) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 31) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 62) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 63) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (SIGNED-BYTE 16)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (SIGNED-BYTE 32)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY FIXNUM (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY FIXNUM (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 64) (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY (SIGNED-BYTE 64)
;                                               (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT)
;                                            (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY
;                                               (COMPLEX SINGLE-FLOAT) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX SINGLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                            (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY
;                                               (COMPLEX DOUBLE-FLOAT) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX DOUBLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a (OR (SIMPLE-ARRAY NIL (*)) SIMPLE-BASE-STRING
;                                (SIMPLE-ARRAY CHARACTER (*))
;                                (SIMPLE-ARRAY SINGLE-FLOAT (*))
;                                (SIMPLE-ARRAY DOUBLE-FLOAT (*))
;                                SIMPLE-BIT-VECTOR
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*))
;                                (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 8) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 16) (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 32) (*))
;                                (SIMPLE-ARRAY FIXNUM (*))
;                                (SIMPLE-ARRAY (SIGNED-BYTE 64) (*))
;                                (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT) (*))
;                                (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                 (*))), not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).

;     (MIN (- CL+SSL::END CL+SSL::START) (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; --> LET LET IF <= OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

; --> LET LET IF <= OR LET IF = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a (OR (DOUBLE-FLOAT 0.0d0) (SINGLE-FLOAT 0.0)
;                               (RATIONAL 0)), not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

;     (< CL+SSL::START CL+SSL::END)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a T, not a SINGLE-FLOAT.
;       The second argument is a T, not a SINGLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a T, not a DOUBLE-FLOAT.
;       The second argument is a T, not a DOUBLE-FLOAT.
;       etc.

;     (- CL+SSL::END CL+SSL::START)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a T, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a T, not a SINGLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES SINGLE-FLOAT
;                                                                &REST T).
;       etc.

;     (MIN (- CL+SSL::END CL+SSL::START) (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; --> LET LET IF <= OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.

;     (PLUSP LENGTH)
; ==>
;   (> LENGTH 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

;     (+ CL+SSL::START CL+SSL::READ-BYTES)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 4) because:
;       The first argument is a NUMBER, not a (SIGNED-BYTE 64).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                                &REST T).
;       etc.

;     (INCF CL+SSL::START CL+SSL::READ-BYTES)
; ==>
;   (SETQ CL+SSL::START (+ CL+SSL::READ-BYTES CL+SSL::START))
; 
; note: doing signed word to integer coercion (cost 20) to START

; compiling (DEFMETHOD STREAM-WRITE-BYTE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-WRITE-BYTE (SSL-STREAM T)
;     (INCF (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
; --> LET* 
; ==>
;   (+ 1 (CL+SSL::SSL-STREAM-OUTPUT-POINTER #:STREAM3))
; 
; note: unable to
;   associate +/(+ -) of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.

;     (SETF (CL+SSL::BUFFER-ELT CL+SSL::BUF
;                               (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
;             CL+SSL::B)
; --> CL+SSL::SET-BUFFER-ELT BLOCK SETF 
; ==>
;   (SB-KERNEL:%SETELT CL+SSL::BUF CL+SSL::INDEX CL+SSL::VAL)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a LIST.

;     (CL+SSL::BUFFER-LENGTH CL+SSL::BUF)
; --> BLOCK 
; ==>
;   (LENGTH CL+SSL::BUF)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (INCF (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
; --> LET* 
; ==>
;   (+ 1 (CL+SSL::SSL-STREAM-OUTPUT-POINTER #:STREAM3))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFMETHOD STREAM-WRITE-SEQUENCE ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-WRITE-SEQUENCE (SSL-STREAM T T T)
;     (>
;      (+ (- CL+SSL::END CL+SSL::START) (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
;      (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (CL+SSL::BUFFER-LENGTH CL+SSL::BUF)
; --> BLOCK 
; ==>
;   (LENGTH CL+SSL::BUF)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (> (- CL+SSL::END CL+SSL::START) (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (CL+SSL::BUFFER-LENGTH CL+SSL::BUF)
; --> BLOCK 
; ==>
;   (LENGTH CL+SSL::BUF)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (CL+SSL::B/S-REPLACE CL+SSL::BUF CL+SSL::SEQ :START1
;                          (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM) :START2
;                          CL+SSL::START :END2 CL+SSL::END)
; --> BLOCK 
; ==>
;   (REPLACE CL+SSL::BUF CL+SSL::SEQ :START1 CL+SSL::START1 :END1 CL+SSL::END1
;            :START2 CL+SSL::START2 :END2 CL+SSL::END2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        SINGLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        DOUBLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The second argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BIT-VECTOR
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 2) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 4) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 7) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 15) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 31) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 62) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 63) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY FIXNUM (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 64) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 64) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT)
;                                            (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX SINGLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                            (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX DOUBLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-VECTOR.
;   The second argument is a SEQUENCE, not a SIMPLE-VECTOR.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-VECTOR
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).

;     (CL+SSL::B/S-REPLACE CL+SSL::BUF CL+SSL::SEQ :START2 CL+SSL::START)
; --> BLOCK 
; ==>
;   (REPLACE CL+SSL::BUF CL+SSL::SEQ :START1 CL+SSL::START1 :END1 CL+SSL::END1
;            :START2 CL+SSL::START2 :END2 CL+SSL::END2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY SINGLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        SINGLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY DOUBLE-FLOAT (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        DOUBLE-FLOAT (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The second argument is a SEQUENCE, not a SIMPLE-BIT-VECTOR.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BIT-VECTOR
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 2) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 2) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 4) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 4) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 7) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 7) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 8) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 15)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 15) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 16)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 31)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 31) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 32)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 62)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 62) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 63)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 63) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (UNSIGNED-BYTE 64)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (UNSIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 8) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 8) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 16) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 16) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 32) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY FIXNUM (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY FIXNUM (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 64) (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (SIGNED-BYTE 64) (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (SIGNED-BYTE 64) (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT)
;                                            (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX SINGLE-FLOAT)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX SINGLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                            (*)).
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY (COMPLEX DOUBLE-FLOAT)
;                                             (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY
;                                                        (COMPLEX DOUBLE-FLOAT)
;                                                        (*))
;                                                       &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-VECTOR.
;   The second argument is a SEQUENCE, not a SIMPLE-VECTOR.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-VECTOR
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The second argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES SIMPLE-BASE-STRING
;                                                              &REST T).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY CHARACTER (*)).
;   The second argument is a SEQUENCE, not a SIMPLE-BASE-STRING.
;   The result is a (VALUES SEQUENCE &OPTIONAL), not a (VALUES
;                                                       (SIMPLE-ARRAY CHARACTER
;                                                        (*))
;                                                       &REST T).

;     (CL+SSL::BUFFER-LENGTH CL+SSL::BUF)
; --> BLOCK 
; ==>
;   (LENGTH CL+SSL::BUF)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

;     (- CL+SSL::END CL+SSL::START)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a T, not a DOUBLE-FLOAT.
;       The second argument is a T, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a T, not a SINGLE-FLOAT.
;       The second argument is a T, not a SINGLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES SINGLE-FLOAT
;                                                                &REST T).
;       etc.

;     (+ (- CL+SSL::END CL+SSL::START) (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a T, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a T, not a SINGLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES SINGLE-FLOAT
;                                                                &REST T).
;       etc.

;     (>
;      (+ (- CL+SSL::END CL+SSL::START) (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM))
;      (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.

;     (- CL+SSL::END CL+SSL::START)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a DOUBLE-FLOAT.
;       The second argument is a NUMBER, not a DOUBLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES DOUBLE-FLOAT
;                                                                &REST T).
;       unable to do inline float arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a SINGLE-FLOAT.
;       The second argument is a NUMBER, not a SINGLE-FLOAT.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES SINGLE-FLOAT
;                                                                &REST T).
;       etc.

;     (> (- CL+SSL::END CL+SSL::START) (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.

;     (INCF (CL+SSL::SSL-STREAM-OUTPUT-POINTER STREAM)
;           (- CL+SSL::END CL+SSL::START))
; --> LET* 
; ==>
;   (+ (- CL+SSL::END CL+SSL::START)
;      (CL+SSL::SSL-STREAM-OUTPUT-POINTER #:STREAM27))
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The second argument is a T, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 4) because:
;       The second argument is a T, not a (SIGNED-BYTE 64).
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (SIGNED-BYTE 64)
;                                                                &REST T).
;       etc.

;     (INCF CL+SSL::START (CL+SSL::BUFFER-LENGTH CL+SSL::BUF))
; ==>
;   (SETQ CL+SSL::START (+ (CL+SSL::BUFFER-LENGTH CL+SSL::BUF) CL+SSL::START))
; 
; note: doing signed word to integer coercion (cost 20) to START

; compiling (DEFMETHOD STREAM-FINISH-OUTPUT ...)
; compiling (DEFMETHOD STREAM-FORCE-OUTPUT ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-FORCE-OUTPUT (SSL-STREAM)
;     (PLUSP CL+SSL::FILL-PTR)
; ==>
;   (> CL+SSL::FILL-PTR 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       etc.

; compiling (DEFUN INSTALL-NONBLOCK-FLAG ...)
; compiling (DEFUN INSTALL-HANDLE-AND-BIO ...)
; compiling (DEFUN INSTALL-KEY-AND-CERT ...)
; compiling (DEFUN X509-CERTIFICATE-NAMES ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFUN X509-CERTIFICATE-NAMES
;     (CFFI-SYS:WITH-FOREIGN-POINTER (CL+SSL::BUF 1024)
;       (LET ((CL+SSL::ISSUER-NAME
;              (CL+SSL::X509-GET-ISSUER-NAME CL+SSL::X509-CERTIFICATE))
;             (CL+SSL::SUBJECT-NAME
;              (CL+SSL::X509-GET-SUBJECT-NAME CL+SSL::X509-CERTIFICATE)))
;         (VALUES
;          (UNLESS (CFFI-SYS:NULL-POINTER-P CL+SSL::ISSUER-NAME)
;            (CL+SSL::X509-NAME-ONELINE CL+SSL::ISSUER-NAME CL+SSL::BUF 1024)
;            (CFFI:FOREIGN-STRING-TO-LISP CL+SSL::BUF))
;          (UNLESS (CFFI-SYS:NULL-POINTER-P CL+SSL::SUBJECT-NAME)
;            (CL+SSL::X509-NAME-ONELINE CL+SSL::SUBJECT-NAME CL+SSL::BUF 1024)
;            (CFFI:FOREIGN-STRING-TO-LISP CL+SSL::BUF)))))
; --> WITH-ALIEN SYMBOL-MACROLET SYMBOL-MACROLET LET LET 
; --> SB-ALIEN-INTERNALS:MAKE-LOCAL-ALIEN SB-SYS:%PRIMITIVE 
; ==>
;   (SB-C::%%PRIMITIVE 'SB-C:ALLOC-ALIEN-STACK-SPACE '(1024))
; 
; note: doing SAP to pointer coercion (cost 20), for:
;       the first result of ALLOC-ALIEN-STACK-SPACE

; compiling (DEFMETHOD SSL-STREAM-HANDLE ...)
; compiling (DEFUN SSL-STREAM-X509-CERTIFICATE ...)
; compiling (DEFUN SSL-LOAD-GLOBAL-VERIFY-LOCATIONS ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFUN SSL-LOAD-GLOBAL-VERIFY-LOCATIONS
;     (CL+SSL::SSL-CTX-LOAD-VERIFY-LOCATIONS CL+SSL::*SSL-GLOBAL-CONTEXT*
;                                            CL+SSL::CAFILE (CFFI-SYS:NULL-POINTER))
; 
; note: doing SAP to pointer coercion (cost 20)

; compiling (DEFUN SSL-SET-GLOBAL-DEFAULT-VERIFY-PATHS ...)
; compiling (DEFUN SSL-CHECK-VERIFY-P ...)
; compiling (DEFUN (SETF SSL-CHECK-VERIFY-P) ...)
; compiling (DEFUN SSL-VERIFY-INIT ...)
; compiling (DEFUN MAYBE-VERIFY-CLIENT-STREAM ...)
; compiling (DEFUN HANDLE-EXTERNAL-FORMAT ...)
; compiling (DEFMACRO WITH-NEW-SSL ...)
; compiling (DEFVAR *MAKE-SSL-CLIENT-STREAM-VERIFY-DEFAULT* ...)
; compiling (DEFUN MAKE-SSL-CLIENT-STREAM ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFUN MAKE-SSL-CLIENT-STREAM
;     (ZEROP (CL+SSL::SSL-SET-CIPHER-LIST CL+SSL::HANDLE CL+SSL::CIPHER-LIST))
; ==>
;   (= (CL+SSL::SSL-SET-CIPHER-LIST CL+SSL::HANDLE CL+SSL::CIPHER-LIST) 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR (COMPLEX SINGLE-FLOAT)
;                                             (COMPLEX DOUBLE-FLOAT)).
; 
; note: unable to open code because: The operands might not be the same type.

;     (CL+SSL::ENSURE-SSL-FUNCALL STREAM CL+SSL::HANDLE #'CL+SSL::SSL-CONNECT
;                                 CL+SSL::HANDLE)
; --> BLOCK LOOP BLOCK TAGBODY PROGN LET WHEN IF PLUSP 
; ==>
;   (> CL+SSL::NBYTES 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       etc.

; compiling (DEFUN MAKE-SSL-SERVER-STREAM ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFUN MAKE-SSL-SERVER-STREAM
;     (CL+SSL::ENSURE-SSL-FUNCALL STREAM CL+SSL::HANDLE #'CL+SSL::SSL-ACCEPT
;                                 CL+SSL::HANDLE)
; --> BLOCK LOOP BLOCK TAGBODY PROGN LET WHEN IF PLUSP 
; ==>
;   (> CL+SSL::NBYTES 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (ZEROP (CL+SSL::SSL-SET-CIPHER-LIST CL+SSL::HANDLE CL+SSL::CIPHER-LIST))
; ==>
;   (= (CL+SSL::SSL-SET-CIPHER-LIST CL+SSL::HANDLE CL+SSL::CIPHER-LIST) 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a NUMBER, not a (OR (COMPLEX SINGLE-FLOAT)
;                                             (COMPLEX DOUBLE-FLOAT)).
; 
; note: unable to open code because: The operands might not be the same type.

;     (CL+SSL::ENSURE-SSL-FUNCALL STREAM CL+SSL::HANDLE #'CL+SSL::SSL-ACCEPT
;                                 CL+SSL::HANDLE)
; --> BLOCK LOOP BLOCK TAGBODY PROGN LET WHEN IF PLUSP 
; ==>
;   (> CL+SSL::NBYTES 0)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a T, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a T, not a FIXNUM.
;       etc.

; compiling (DEFGENERIC STREAM-FD ...)
; compiling (DEFMETHOD STREAM-FD ...)
; compiling (DEFMETHOD STREAM-FD ...)

; file: C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams.lisp
; in: DEFMETHOD STREAM-FD (SB-SYS:FD-STREAM)
;     (DEFMETHOD CL+SSL:STREAM-FD ((STREAM SB-SYS:FD-STREAM))
;       (SB-SYS:FD-STREAM-FD STREAM))
; --> PROGN EVAL-WHEN SB-PCL::%DEFMETHOD-EXPANDER 
; --> SB-PCL::LOAD-DEFMETHOD SB-PCL::LOAD-DEFMETHOD LIST* LET* 
; --> SB-INT:NAMED-LAMBDA 
; ==>
;   #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD CL+SSL:STREAM-FD
;                           (SB-SYS:FD-STREAM))
;         (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. STREAM)
;       (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
;                (DISABLE-PACKAGE-LOCKS SB-PCL::PV-ENV-ENVIRONMENT))
;       (DECLARE (SB-PCL::%PARAMETER STREAM))
;       (DECLARE (TYPE SB-SYS:FD-STREAM STREAM))
;       (DECLARE (IGNORABLE STREAM))
;       (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
;         (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((STREAM)
;                                                 SB-PCL::.NEXT-METHOD-CALL.
;                                                 (STREAM) NIL
;                                                 :CALL-NEXT-METHOD-P NIL :SETQ-P
;                                                 NIL :PARAMETERS-SETQD NIL
;                                                 :METHOD-CELL (#:METHOD-CELL)
;                                                 ...)
;           (DECLARE (SB-PCL::%CLASS STREAM SB-SYS:FD-STREAM))
;           (LOCALLY
;            (DECLARE #)
;            (SYMBOL-MACROLET #
;              #
;              #)))))
; 
; note: doing signed word to integer coercion (cost 20) to "<return value>"


; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/streams-tmp8V3J6PE9.fasl
; compilation finished in 0:00:00.104
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/bio.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE CL+SSL)
; compiling (DEFCONSTANT +BIO-TYPE-SOCKET+ ...)
; compiling (DEFCONSTANT +BIO_FLAGS_READ+ ...)
; compiling (DEFCONSTANT +BIO_FLAGS_WRITE+ ...)
; compiling (DEFCONSTANT +BIO_FLAGS_SHOULD_RETRY+ ...)
; compiling (DEFCONSTANT +BIO_CTRL_FLUSH+ ...)
; compiling (CFFI:DEFCSTRUCT BIO-METHOD ...)
; compiling (CFFI:DEFCSTRUCT BIO ...)
; compiling (DEFUN MAKE-BIO-LISP-METHOD ...)
; compiling (DEFUN BIO-NEW-LISP ...)
; compiling (CFFI:DEFCALLBACK LISP-WRITE ...)
; compiling (DEFUN CLEAR-RETRY-FLAGS ...)
; compiling (DEFUN SET-RETRY-READ ...)
; compiling (CFFI:DEFCALLBACK LISP-READ ...)
; compiling (CFFI:DEFCALLBACK LISP-PUTS ...)
; compiling (CFFI:DEFCALLBACK LISP-CTRL ...)
; compiling (CFFI:DEFCALLBACK LISP-CREATE ...)
; compiling (CFFI:DEFCALLBACK LISP-DESTROY ...)
; compiling (SETF *BIO-LISP-METHOD* ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/bio-tmp9V47YWQF.fasl
; compilation finished in 0:00:00.038
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/random.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFUN RANDOM-BYTES ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/random-tmp9BN22RMA.fasl
; compilation finished in 0:00:00.008
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/context.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFINE-CONDITION VERIFY-LOCATION-NOT-FOUND-ERROR ...)
; compiling (DEFUN VALIDATE-VERIFY-LOCATION ...)
; compiling (DEFUN ADD-VERIFY-LOCATIONS ...)
; compiling (DEFUN SSL-CTX-SET-VERIFY-LOCATION ...)
; compiling (ALEXANDRIA:DEFINE-CONSTANT +DEFAULT-CIPHER-LIST+ ...)
; compiling (CFFI:DEFCALLBACK VERIFY-PEER-CALLBACK ...)
; compiling (DEFUN MAKE-CONTEXT ...)
; compiling (DEFUN CALL-WITH-GLOBAL-CONTEXT ...)
; compiling (DEFMACRO WITH-GLOBAL-CONTEXT ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/context-tmp1CXFJSK9.fasl
; compilation finished in 0:00:00.022
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/verify-hostname.lisp" (written 18 MAY 2020 03:40:12 PM):
; compiling (IN-PACKAGE :CL+SSL)
; compiling (DEFINE-CONDITION HOSTNAME-VERIFICATION-ERROR ...)
; compiling (DEFINE-CONDITION UNABLE-TO-MATCH-ALTNAMES ...)
; compiling (DEFINE-CONDITION UNABLE-TO-DECODE-COMMON-NAME ...)
; compiling (DEFINE-CONDITION UNABLE-TO-MATCH-COMMON-NAME ...)
; compiling (DEFUN CASE-INSENSITIVE-MATCH ...)
; compiling (DEFUN REMOVE-TRAILING-DOT ...)
; compiling (DEFUN CHECK-WILDCARD-IN-LEFTMOST-LABEL ...)
; compiling (DEFUN CHECK-SINGLE-WILDCARD ...)
; compiling (DEFUN CHECK-TWO-LABELS-AFTER-WILDCARD ...)
; compiling (DEFUN VALIDATE-AND-PARSE-WILDCARD-IDENTIFIER ...)
; compiling (DEFUN WILDCARD-NOT-IN-A-LABEL ...)
; compiling (DEFUN TRY-MATCH-WILDCARD ...)
; compiling (DEFUN MAYBE-TRY-MATCH-WILDCARD ...)
; compiling (DEFUN TRY-MATCH-HOSTNAME ...)
; compiling (DEFUN TRY-MATCH-HOSTNAMES ...)
; compiling (DEFUN MAYBE-CHECK-SUBJECT-CN ...)
; compiling (DEFUN VERIFY-HOSTNAME ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/cl+ssl-20200427-git/src/verify-hostname-tmpX4BRKI0R.fasl
; compilation finished in 0:00:00.015
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/packages.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFPACKAGE #:URL-REWRITE ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/packages-tmpQ371UGST.fasl
; compilation finished in 0:00:00.010
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/specials.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :URL-REWRITE)
; compiling (DEFVAR *URL-REWRITE-TAGS* ...)
; compiling (DEFVAR *URL-REWRITE-FILL-TAGS* ...)
; compiling (DEFVAR *FIND-STRING-HASH* ...)
; compiling (DEFVAR *HYPERDOC-BASE-URI* ...)
; compiling (LET (#) ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/specials-tmp2OWI3Q7U.fasl
; compilation finished in 0:00:00.005
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/primitives.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :URL-REWRITE)
; compiling (DECLAIM (INLINE PEEK-CHAR*))
; compiling (DEFUN PEEK-CHAR* ...)
; compiling (DECLAIM (INLINE WHITESPACEP))
; compiling (DEFUN WHITESPACEP ...)
; compiling (DECLAIM (INLINE LETTERP))
; compiling (DEFUN LETTERP ...)
; compiling (DECLAIM (INLINE NAME-CHAR-P))
; compiling (DEFUN NAME-CHAR-P ...)
; compiling (DEFUN COMMENT-START-P ...)
; compiling (DEFUN READ-WHILE ...)
; compiling (DEFUN READ-UNTIL ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/primitives-tmp9KKTJMYV.fasl
; compilation finished in 0:00:00.018
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/util.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :URL-REWRITE)
; compiling (DECLAIM (INLINE SKIP-WHITESPACE))
; compiling (DEFUN SKIP-WHITESPACE ...)
; compiling (DEFUN READ-DELIMITED-STRING ...)
; compiling (DECLAIM (INLINE READ-NAME))
; compiling (DEFUN READ-NAME ...)
; compiling (DEFUN READ-ATTRIBUTE ...)
; compiling (DEFUN SKIP-COMMENT ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/util-tmpJU0JWO19.fasl
; compilation finished in 0:00:00.016
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/url-rewrite.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :URL-REWRITE)
; compiling (DEFUN STARTS-WITH-SCHEME-P ...)
; compiling (DEFUN URL-ENCODE ...)
; compiling (DEFUN ADD-GET-PARAM-TO-URL ...)
; compiling (DEFUN REWRITE-URLS ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/url-rewrite/url-rewrite-tmpZX2WN8N4.fasl
; compilation finished in 0:00:00.021
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/packages.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFPACKAGE #:HUNCHENTOOT ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/packages-tmpOU81XRV0.fasl
; compilation finished in 0:00:00.003
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/compat.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFMACRO WHEN-LET ...)
; compiling (DEFMACRO WITH-UNIQUE-NAMES ...)
; compiling (DEFMACRO WITH-REBINDING ...)
; compiling (DEFUN GET-PEER-ADDRESS-AND-PORT ...)
; compiling (DEFUN GET-LOCAL-ADDRESS-AND-PORT ...)
; compiling (DEFUN MAKE-SOCKET-STREAM ...)
; compiling (DEFUN MAKE-LOCK ...)
; compiling (DEFMACRO WITH-LOCK-HELD ...)
; compiling (DEFUN MAKE-CONDITION-VARIABLE ...)
; compiling (DEFUN CONDITION-VARIABLE-SIGNAL ...)
; compiling (DEFUN CONDITION-VARIABLE-WAIT ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/compat-tmpY2ML9CFA.fasl
; compilation finished in 0:00:00.020
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/specials.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFMACRO DEFCONSTANT ...)
; compiling (DEFMACRO DEFVAR-UNBOUND ...)
; compiling (DEFVAR *HTTP-REASON-PHRASE-MAP* ...)
; compiling (DEFMACRO DEF-HTTP-RETURN-CODE ...)
; compiling (DEFCONSTANT +CRLF+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-CONTINUE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-SWITCHING-PROTOCOLS+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-OK+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-CREATED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-ACCEPTED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NON-AUTHORITATIVE-INFORMATION+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NO-CONTENT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-RESET-CONTENT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-PARTIAL-CONTENT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-MULTI-STATUS+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-MULTIPLE-CHOICES+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-MOVED-PERMANENTLY+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-MOVED-TEMPORARILY+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-SEE-OTHER+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NOT-MODIFIED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-USE-PROXY+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-TEMPORARY-REDIRECT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-BAD-REQUEST+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-AUTHORIZATION-REQUIRED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-PAYMENT-REQUIRED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-FORBIDDEN+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NOT-FOUND+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-METHOD-NOT-ALLOWED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NOT-ACCEPTABLE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-PROXY-AUTHENTICATION-REQUIRED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-REQUEST-TIME-OUT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-CONFLICT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-GONE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-LENGTH-REQUIRED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-PRECONDITION-FAILED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-REQUEST-ENTITY-TOO-LARGE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-REQUEST-URI-TOO-LARGE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-UNSUPPORTED-MEDIA-TYPE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-REQUESTED-RANGE-NOT-SATISFIABLE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-EXPECTATION-FAILED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-FAILED-DEPENDENCY+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-PRECONDITION-REQUIRED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-TOO-MANY-REQUESTS+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-REQUEST-HEADER-FIELDS-TOO-LARGE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-INTERNAL-SERVER-ERROR+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NOT-IMPLEMENTED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-BAD-GATEWAY+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-SERVICE-UNAVAILABLE+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-GATEWAY-TIME-OUT+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-VERSION-NOT-SUPPORTED+ ...)
; compiling (DEF-HTTP-RETURN-CODE +HTTP-NETWORK-AUTHENTICATION-REQUIRED+ ...)
; compiling (DEFCONSTANT +DAY-NAMES+ ...)
; compiling (DEFCONSTANT +MONTH-NAMES+ ...)
; compiling (DEFVAR *REWRITE-FOR-SESSION-URLS* ...)
; compiling (DEFVAR *CONTENT-TYPES-FOR-URL-REWRITE* ...)
; compiling (DEFVAR *THE-RANDOM-STATE* ...)
; compiling (DEFVAR-UNBOUND *SESSION-SECRET* ...)
; compiling (DEFVAR-UNBOUND *HUNCHENTOOT-STREAM* ...)
; compiling (DEFVAR-UNBOUND *FINISH-PROCESSING-SOCKET* ...)
; compiling (DEFVAR-UNBOUND *CLOSE-HUNCHENTOOT-STREAM* ...)
; compiling (DEFVAR *HEADERS-SENT* ...)
; compiling (DEFVAR *FILE-UPLOAD-HOOK* ...)
; compiling (DEFVAR *SESSION-DB* ...)
; compiling (DEFVAR *SESSION-MAX-TIME* ...)
; compiling (DEFVAR *SESSION-GC-FREQUENCY* ...)
; compiling (DEFVAR *USE-USER-AGENT-FOR-SESSIONS* ...)
; compiling (DEFVAR *USE-REMOTE-ADDR-FOR-SESSIONS* ...)
; compiling (DEFVAR *DEFAULT-CONTENT-TYPE* ...)
; compiling (DEFVAR *METHODS-FOR-POST-PARAMETERS* ...)
; compiling (DEFVAR *HEADER-STREAM* ...)
; compiling (DEFVAR *SHOW-LISP-ERRORS-P* ...)
; compiling (DEFVAR *SHOW-LISP-BACKTRACES-P* ...)
; compiling (DEFVAR *LOG-LISP-ERRORS-P* ...)
; compiling (DEFVAR *LOG-LISP-BACKTRACES-P* ...)
; compiling (DEFVAR *LOG-LISP-WARNINGS-P* ...)
; compiling (DEFVAR *LISP-ERRORS-LOG-LEVEL* ...)
; compiling (DEFVAR *LISP-WARNINGS-LOG-LEVEL* ...)
; compiling (DEFVAR *MESSAGE-LOG-LOCK* ...)
; compiling (DEFVAR *ACCESS-LOG-LOCK* ...)
; compiling (DEFVAR *CATCH-ERRORS-P* ...)
; compiling (DEFVAR-UNBOUND *ACCEPTOR* ...)
; compiling (DEFVAR-UNBOUND *REQUEST* ...)
; compiling (DEFVAR-UNBOUND *REPLY* ...)
; compiling (DEFVAR-UNBOUND *SESSION* ...)
; compiling (DEFCONSTANT +IMPLEMENTATION-LINK+ ...)
; compiling (DEFVAR *TMP-DIRECTORY* ...)
; compiling (DEFVAR *TMP-FILES* ...)
; compiling (DEFCONSTANT +LATIN-1+ ...)
; compiling (DEFCONSTANT +UTF-8+ ...)
; compiling (DEFVAR *HUNCHENTOOT-DEFAULT-EXTERNAL-FORMAT* ...)
; compiling (DEFCONSTANT +BUFFER-LENGTH+ ...)
; compiling (DEFVAR *DEFAULT-CONNECTION-TIMEOUT* ...)
; compiling (DEFINE-SYMBOL-MACRO *SUPPORTS-THREADS-P* ...)
; compiling (DEFVAR *GLOBAL-SESSION-DB-LOCK* ...)
; compiling (PUSHNEW :HUNCHENTOOT ...)
; compiling (DEFVAR *HYPERDOC-BASE-URI* ...)
; compiling (LET (#) ...)
; compiling (DEFPARAMETER *HUNCHENTOOT-VERSION* ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/specials-tmpX2JYJDQE.fasl
; compilation finished in 0:00:00.074
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/conditions.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFINE-CONDITION HUNCHENTOOT-CONDITION ...)
; compiling (DEFINE-CONDITION HUNCHENTOOT-ERROR ...)
; compiling (DEFINE-CONDITION HUNCHENTOOT-SIMPLE-ERROR ...)
; compiling (DEFUN HUNCHENTOOT-ERROR ...)
; compiling (DEFINE-CONDITION HUNCHENTOOT-WARNING ...)
; compiling (DEFINE-CONDITION HUNCHENTOOT-SIMPLE-WARNING ...)
; compiling (DEFUN HUNCHENTOOT-WARN ...)
; compiling (DEFINE-CONDITION PARAMETER-ERROR ...)
; compiling (DEFUN PARAMETER-ERROR ...)
; compiling (DEFINE-CONDITION OPERATION-NOT-IMPLEMENTED ...)
; compiling (DEFUN NOT-IMPLEMENTED ...)
; compiling (DEFINE-CONDITION BAD-REQUEST ...)
; compiling (DEFGENERIC MAYBE-INVOKE-DEBUGGER ...)
; compiling (DEFMACRO WITH-DEBUGGER ...)
; compiling (DEFMACRO IGNORE-ERRORS* ...)
; compiling (DEFMACRO HANDLER-CASE* ...)
; compiling (DEFUN GET-BACKTRACE ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/conditions-tmpOPCILR65.fasl
; compilation finished in 0:00:00.017
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/mime-types.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFPARAMETER *MIME-TYPE-LIST* ...)
; compiling (DEFPARAMETER *MIME-TYPE-HASH* ...)
; compiling (DEFUN MIME-TYPE ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/mime-types-tmpRV9F8A9A.fasl
; compilation finished in 0:00:00.010
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/util.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFUN STARTS-WITH-P ...)
; compiling (DEFUN STARTS-WITH-ONE-OF-P ...)
; compiling (DEFUN CREATE-RANDOM-STRING ...)
; compiling (DEFUN REASON-PHRASE ...)
; compiling (DEFGENERIC ASSOC* ...)
; compiling (DEFUN MD5-HEX ...)
; compiling (DEFUN ESCAPE-FOR-HTML ...)
; compiling (DEFUN HTTP-TOKEN-P ...)
; compiling (DEFUN RFC-1123-DATE ...)
; compiling (DEFUN ISO-TIME ...)
; compiling (LET (#) ...)
; compiling (DEFUN QUOTE-STRING ...)
; compiling (DEFMACRO UPGRADE-VECTOR ...)
; compiling (DEFUN ENSURE-PARSE-INTEGER ...)
; compiling (DEFUN URL-DECODE ...)
; compiling (DEFUN FORM-URL-ENCODED-LIST-TO-ALIST ...)
; compiling (DEFUN COOKIES-TO-ALIST ...)
; compiling (DEFUN URL-ENCODE ...)
; compiling (DEFUN PARSE-CONTENT-TYPE ...)
; compiling (DEFUN KEEP-ALIVE-P ...)
; compiling (DEFUN ADDRESS-STRING ...)
; compiling (DEFUN INPUT-CHUNKING-P ...)
; compiling (DEFUN SSL-P ...)
; compiling (DEFMACRO WITH-MAPPED-CONDITIONS ...)
; compiling (DEFMACRO WITH-CONDITIONS-CAUGHT-AND-LOGGED ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/util-tmpK2ZAJT4I.fasl
; compilation finished in 0:00:00.100
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/log.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFMACRO WITH-LOG-STREAM ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/log-tmpUX5S4ADN.fasl
; compilation finished in 0:00:00.006
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/cookie.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFCLASS COOKIE ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFUN SET-COOKIE* ...)
; compiling (DEFUN SET-COOKIE ...)
; compiling (DEFUN COOKIE-DATE ...)
; compiling (DEFMETHOD STRINGIFY-COOKIE ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/cookie-tmp10401X32.fasl
; compilation finished in 0:00:00.020
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/reply.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFCLASS REPLY ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFUN HEADERS-OUT* ...)
; compiling (DEFUN COOKIES-OUT* ...)
; compiling (DEFUN (SETF COOKIES-OUT*) ...)
; compiling (DEFUN CONTENT-TYPE* ...)
; compiling (DEFUN (SETF CONTENT-TYPE*) ...)
; compiling (DEFUN CONTENT-LENGTH* ...)
; compiling (DEFUN (SETF CONTENT-LENGTH*) ...)
; compiling (DEFUN RETURN-CODE* ...)
; compiling (DEFUN (SETF RETURN-CODE*) ...)
; compiling (DEFUN REPLY-EXTERNAL-FORMAT* ...)
; compiling (DEFUN (SETF REPLY-EXTERNAL-FORMAT*) ...)
; compiling (DEFUN HEADER-OUT-SET-P ...)
; compiling (DEFUN HEADER-OUT ...)
; compiling (DEFUN COOKIE-OUT ...)
; compiling (DEFGENERIC (SETF HEADER-OUT) ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/reply-tmpZ7CBRM0G.fasl
; compilation finished in 0:00:00.019
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/request.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFCLASS REQUEST ...)
; compiling (DEFGENERIC PROCESS-REQUEST ...)
; compiling (DEFUN CONVERT-HACK ...)
; compiling (DEFUN PARSE-RFC2388-FORM-DATA ...)
; compiling (DEFUN GET-POST-DATA ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFMETHOD PROCESS-REQUEST ...)
; compiling (DEFUN WITHIN-REQUEST-P ...)
; compiling (DEFUN PARSE-MULTIPART-FORM-DATA ...)
; compiling (DEFUN MAYBE-READ-POST-PARAMETERS ...)
; compiling (DEFUN RECOMPUTE-REQUEST-PARAMETERS ...)
; compiling (DEFUN SCRIPT-NAME* ...)
; compiling (DEFUN QUERY-STRING* ...)
; compiling (DEFUN GET-PARAMETERS* ...)
; compiling (DEFMETHOD POST-PARAMETERS ...)
; compiling (DEFUN POST-PARAMETERS* ...)
; compiling (DEFUN HEADERS-IN* ...)
; compiling (DEFUN COOKIES-IN* ...)
; compiling (DEFGENERIC HEADER-IN ...)
; compiling (DEFUN HEADER-IN* ...)
; compiling (DEFUN AUTHORIZATION ...)
; compiling (DEFUN REMOTE-ADDR* ...)
; compiling (DEFUN REMOTE-PORT* ...)
; compiling (DEFUN LOCAL-ADDR* ...)
; compiling (DEFUN LOCAL-PORT* ...)
; compiling (DEFUN REAL-REMOTE-ADDR ...)
; compiling (DEFUN HOST ...)
; compiling (DEFUN REQUEST-URI* ...)
; compiling (DEFUN REQUEST-METHOD* ...)
; compiling (DEFUN SERVER-PROTOCOL* ...)
; compiling (DEFUN USER-AGENT ...)
; compiling (DEFUN COOKIE-IN ...)
; compiling (DEFUN REFERER ...)
; compiling (DEFUN GET-PARAMETER ...)
; compiling (DEFUN POST-PARAMETER ...)
; compiling (DEFUN PARAMETER ...)
; compiling (DEFUN HANDLE-IF-MODIFIED-SINCE ...)
; compiling (DEFUN EXTERNAL-FORMAT-FROM-CONTENT-TYPE ...)
; compiling (DEFUN RAW-POST-DATA ...)
; compiling (DEFUN AUX-REQUEST-VALUE ...)
; compiling (DEFSETF AUX-REQUEST-VALUE ...)
; compiling (DEFUN DELETE-AUX-REQUEST-VALUE ...)
; compiling (DEFUN PARSE-PATH ...)
; compiling (DEFUN REQUEST-PATHNAME ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/request-tmp9OZEQ0G2.fasl
; compilation finished in 0:00:00.091
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/session.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFGENERIC SESSION-DB-LOCK ...)
; compiling (DEFMETHOD SESSION-DB-LOCK ...)
; compiling (DEFMACRO WITH-SESSION-LOCK-HELD ...)
; compiling (DEFGENERIC SESSION-DB ...)
; compiling (DEFMETHOD SESSION-DB ...)
; compiling (DEFGENERIC (SETF SESSION-DB) ...)
; compiling (DEFMETHOD (SETF SESSION-DB) ...)
; compiling (DEFGENERIC NEXT-SESSION-ID ...)
; compiling (LET (#) ...)
; compiling (DEFCLASS SESSION ...)
; compiling (DEFUN ENCODE-SESSION-STRING ...)
; compiling (DEFUN STRINGIFY-SESSION ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFUN SESSION-GC ...)
; compiling (DEFUN SESSION-VALUE ...)
; compiling (DEFSETF SESSION-VALUE ...)
; compiling (DEFUN DELETE-SESSION-VALUE ...)
; compiling (DEFGENERIC SESSION-COOKIE-VALUE ...)
; compiling (DEFMETHOD SESSION-COOKIE-VALUE ...)
; compiling (DEFGENERIC SESSION-COOKIE-NAME ...)
; compiling (DEFMETHOD SESSION-COOKIE-NAME ...)
; compiling (DEFGENERIC SESSION-CREATED ...)
; compiling (LET (#) ...)
; compiling (DEFUN START-SESSION ...)
; compiling (DEFUN REMOVE-SESSION ...)
; compiling (DEFUN SESSION-TOO-OLD-P ...)
; compiling (DEFUN GET-STORED-SESSION ...)
; compiling (DEFUN REGENERATE-SESSION-COOKIE-VALUE ...)
; compiling (DEFGENERIC SESSION-VERIFY ...)
; compiling (DEFMETHOD SESSION-VERIFY ...)
; compiling (DEFUN RESET-SESSION-SECRET ...)
; compiling (DEFUN RESET-SESSIONS ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/session-tmpB2JTL1W9.fasl
; compilation finished in 0:00:00.035
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/misc.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (LET (#) ...)
; compiling (DEFUN MAYBE-REWRITE-URLS-FOR-SESSION ...)
; compiling (DEFUN CREATE-PREFIX-DISPATCHER ...)
; compiling (DEFUN CREATE-REGEX-DISPATCHER ...)
; compiling (DEFUN ABORT-REQUEST-HANDLER ...)
; compiling (DEFUN MAYBE-HANDLE-RANGE-HEADER ...)
; compiling (DEFUN HANDLE-STATIC-FILE ...)
; compiling (DEFUN CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER ...)
; compiling (DEFUN CREATE-FOLDER-DISPATCHER-AND-HANDLER ...)
; compiling (DEFUN NO-CACHE ...)
; compiling (DEFUN REDIRECT ...)
; compiling (DEFUN REQUIRE-AUTHORIZATION ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/misc-tmpP3BI68WQ.fasl
; compilation finished in 0:00:00.029
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/headers.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFGENERIC WRITE-HEADER-LINE ...)
; compiling (DEFUN MAYBE-ADD-CHARSET-TO-CONTENT-TYPE-HEADER ...)
; compiling (DEFUN START-OUTPUT ...)
; compiling (DEFUN SEND-RESPONSE ...)
; compiling (DEFUN SEND-HEADERS ...)
; compiling (DEFUN READ-INITIAL-REQUEST-LINE ...)
; compiling (DEFUN SEND-BAD-REQUEST-RESPONSE ...)
; compiling (DEFUN PRINTABLE-ASCII-CHAR-P ...)
; compiling (DEFUN GET-REQUEST-DATA ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/headers-tmpQDARA81Z.fasl
; compilation finished in 0:00:00.029
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/set-timeouts.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFUN SET-TIMEOUTS ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/set-timeouts-tmpYEMMM7SE.fasl
; compilation finished in 0:00:00.003
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/taskmaster.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFCLASS TASKMASTER ...)
; compiling (DEFGENERIC EXECUTE-ACCEPTOR ...)
; compiling (DEFGENERIC HANDLE-INCOMING-CONNECTION ...)
; compiling (DEFGENERIC SHUTDOWN ...)
; compiling (DEFGENERIC CREATE-REQUEST-HANDLER-THREAD ...)
; compiling (DEFGENERIC TOO-MANY-TASKMASTER-REQUESTS ...)
; compiling (DEFGENERIC TASKMASTER-MAX-THREAD-COUNT ...)
; compiling (DEFGENERIC TASKMASTER-MAX-ACCEPT-COUNT ...)
; compiling (DEFGENERIC TASKMASTER-THREAD-COUNT ...)
; compiling (DEFGENERIC INCREMENT-TASKMASTER-THREAD-COUNT ...)
; compiling (DEFGENERIC DECREMENT-TASKMASTER-THREAD-COUNT ...)
; compiling (DEFGENERIC START-THREAD ...)
; compiling (DEFCLASS SINGLE-THREADED-TASKMASTER ...)
; compiling (DEFMETHOD EXECUTE-ACCEPTOR ...)
; compiling (DEFMETHOD HANDLE-INCOMING-CONNECTION ...)
; compiling (DEFVAR *DEFAULT-MAX-THREAD-COUNT* ...)
; compiling (DEFVAR *DEFAULT-MAX-ACCEPT-COUNT* ...)
; compiling (DEFCLASS MULTI-THREADED-TASKMASTER ...)
; compiling (DEFMETHOD EXECUTE-ACCEPTOR ...)
; compiling (DEFCLASS ONE-THREAD-PER-CONNECTION-TASKMASTER ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFMETHOD INCREMENT-TASKMASTER-ACCEPT-COUNT ...)
; compiling (DEFMETHOD DECREMENT-TASKMASTER-ACCEPT-COUNT ...)
; compiling (DEFMETHOD INCREMENT-TASKMASTER-THREAD-COUNT ...)
; compiling (DEFMETHOD DECREMENT-TASKMASTER-THREAD-COUNT ...)
; compiling (DEFMETHOD NOTE-FREE-CONNECTION ...)
; compiling (DEFMETHOD WAIT-FOR-FREE-CONNECTION ...)
; compiling (DEFMETHOD TOO-MANY-TASKMASTER-REQUESTS ...)
; compiling (DEFMETHOD CREATE-REQUEST-HANDLER-THREAD ...)
; compiling (DEFMETHOD SHUTDOWN ...)
; compiling (DEFMETHOD SHUTDOWN ...)
; compiling (DEFMETHOD HANDLE-INCOMING-CONNECTION ...)
; compiling (DEFMETHOD HANDLE-INCOMING-CONNECTION% ...)
; compiling (DEFUN SEND-SERVICE-UNAVAILABLE-REPLY ...)
; compiling (DEFUN CLIENT-AS-STRING ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/taskmaster-tmp73HU0RPK.fasl
; compilation finished in 0:00:00.072
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/acceptor.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFUN DEFAULT-DOCUMENT-DIRECTORY ...)
; compiling (DEFCLASS ACCEPTOR ...)
; compiling (DEFMETHOD PRINT-OBJECT ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFGENERIC START ...)
; compiling (DEFGENERIC STOP ...)
; compiling (DEFGENERIC STARTED-P ...)
; compiling (DEFGENERIC START-LISTENING ...)
; compiling (DEFGENERIC ACCEPT-CONNECTIONS ...)
; compiling (DEFGENERIC INITIALIZE-CONNECTION-STREAM ...)
; compiling (DEFGENERIC RESET-CONNECTION-STREAM ...)
; compiling (DEFGENERIC PROCESS-CONNECTION ...)
; compiling (DEFGENERIC HANDLE-REQUEST ...)
; compiling (DEFGENERIC ACCEPTOR-DISPATCH-REQUEST ...)
; compiling (DEFGENERIC ACCEPTOR-SSL-P ...)
; compiling (DEFMETHOD START ...)
; compiling (DEFMETHOD STOP ...)
; compiling (DEFUN WAKE-ACCEPTOR-FOR-SHUTDOWN ...)
; compiling (DEFMETHOD INITIALIZE-CONNECTION-STREAM ...)
; compiling (DEFMETHOD RESET-CONNECTION-STREAM ...)
; compiling (DEFMETHOD PROCESS-CONNECTION ...)
; compiling (DEFUN DO-WITH-ACCEPTOR-REQUEST-COUNT-INCREMENTED ...)
; compiling (DEFMACRO WITH-ACCEPTOR-REQUEST-COUNT-INCREMENTED ...)
; compiling (DEFUN ACCEPTOR-MAKE-REQUEST ...)
; compiling (DEFGENERIC DETACH-SOCKET ...)
; compiling (DEFMETHOD DETACH-SOCKET ...)
; compiling (DEFMETHOD PROCESS-CONNECTION ...)
; compiling (DEFMETHOD ACCEPTOR-SSL-P ...)
; compiling (DEFGENERIC ACCEPTOR-LOG-ACCESS ...)
; compiling (DEFMETHOD ACCEPTOR-LOG-ACCESS ...)
; compiling (DEFGENERIC ACCEPTOR-LOG-MESSAGE ...)
; compiling (DEFMETHOD ACCEPTOR-LOG-MESSAGE ...)
; compiling (DEFUN LOG-MESSAGE* ...)
; compiling (DEFMETHOD START-LISTENING ...)
; compiling (DEFMETHOD START-LISTENING ...)
; compiling (DEFMETHOD ACCEPT-CONNECTIONS ...)
; compiling (DEFMETHOD ACCEPTOR-DISPATCH-REQUEST ...)
; compiling (DEFMETHOD HANDLE-REQUEST ...)
; compiling (DEFGENERIC ACCEPTOR-STATUS-MESSAGE ...)
; compiling (DEFUN MAKE-COOKED-MESSAGE ...)
; compiling (DEFMETHOD ACCEPTOR-STATUS-MESSAGE ...)
; compiling (DEFMETHOD ACCEPTOR-STATUS-MESSAGE ...)
; compiling (DEFUN STRING-AS-KEYWORD ...)
; compiling (DEFMETHOD ACCEPTOR-STATUS-MESSAGE ...)
; compiling (DEFGENERIC ACCEPTOR-REMOVE-SESSION ...)
; compiling (DEFMETHOD ACCEPTOR-REMOVE-SESSION ...)
; compiling (DEFGENERIC ACCEPTOR-SERVER-NAME ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/acceptor-tmpIO5N7K88.fasl
; compilation finished in 0:00:00.125
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/ssl.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFCLASS SSL-ACCEPTOR ...)
; compiling (DEFMETHOD ACCEPTOR-SSL-P ...)
; compiling (DEFMETHOD INITIALIZE-INSTANCE ...)
; compiling (DEFMETHOD INITIALIZE-CONNECTION-STREAM ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/ssl-tmpCM21U60Z.fasl
; compilation finished in 0:00:00.061
; compiling file "C:/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/easy-handlers.lisp" (written 18 MAY 2020 03:40:16 PM):
; compiling (IN-PACKAGE :HUNCHENTOOT)
; compiling (DEFVAR *DISPATCH-TABLE* ...)
; compiling (DEFVAR *EASY-HANDLER-ALIST* ...)
; compiling (DEFUN COMPUTE-REAL-NAME ...)
; compiling (DEFUN CONVERT-PARAMETER ...)
; compiling (DEFUN COMPUTE-SIMPLE-PARAMETER ...)
; compiling (DEFUN COMPUTE-LIST-PARAMETER ...)
; compiling (DEFUN COMPUTE-ARRAY-PARAMETER ...)
; compiling (DEFUN COMPUTE-HASH-TABLE-PARAMETER ...)
; compiling (DEFUN COMPUTE-PARAMETER ...)
; compiling (DEFUN MAKE-DEFUN-PARAMETER ...)
; compiling (DEFMACRO DEFINE-EASY-HANDLER ...)
; compiling (DEFUN DISPATCH-EASY-HANDLERS ...)
; compiling (DEFCLASS EASY-ACCEPTOR ...)
; compiling (DEFMETHOD ACCEPTOR-DISPATCH-REQUEST ...)
; compiling (DEFCLASS EASY-SSL-ACCEPTOR ...)

; wrote C:/Users/lsh/AppData/Local/cache/common-lisp/sbcl-2.0.0-win-x64/C/Users/lsh/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/easy-handlers-tmp9DT7SEFG.fasl
; compilation finished in 0:00:00.048
; 
; compilation unit finished
;   printed 209 notes
T
CL-USER> (asdf:load-system "parenscript")
; Evaluation aborted on Component "parenscript" not found.
CL-USER> (defpackage :Lee-Sanghyeup (:use :cl :cl-who :hunchentoot :parenscript))
; Evaluation aborted on #<PACKAGE-DOES-NOT-EXIST "The name ~S does not designate any package." {10054DBD53}>.
CL-USER> (require 'cl-who)
WARNING: System definition file #P"C:/Users/lsh/quicklisp/dists/quicklisp/software/cl-who-20190710-git/cl-who.asd" contains definition for system "cl-who-test". Please only define "cl-who" and secondary systems with a name starting with "cl-who/" (e.g. "cl-who/test") in that file.
NIL
CL-USER> (require 'parenscript)
; Evaluation aborted on #<SB-INT:EXTENSION-FAILURE "Don't know how to ~S ~A." {1005B1E683}>.
CL-USER> (ql:quickload parenscript)
; Evaluation aborted on #<UNBOUND-VARIABLE PARENSCRIPT {1005D32FA3}>.
CL-USER> (ql:quickload 'parenscript)
To load "parenscript":
  Load 2 ASDF systems:
    asdf cl-ppcre
  Install 3 Quicklisp releases:
    anaphora named-readtables parenscript
; Fetching #<URL "http://beta.quicklisp.org/archive/named-readtables/2020-02-18/named-readtables-20200218-git.tgz">
; 32.45KB
==================================================
33,229 bytes in 0.20 seconds (165.56KB/sec)
; Fetching #<URL "http://beta.quicklisp.org/archive/anaphora/2019-10-07/anaphora-20191007-git.tgz">
; 5.97KB
==================================================
6,114 bytes in 0.00 seconds (1492.68KB/sec)
; Fetching #<URL "http://beta.quicklisp.org/archive/parenscript/2018-12-10/Parenscript-2.7.1.tgz">
; 101.52KB
==================================================
103,952 bytes in 0.01 seconds (11279.51KB/sec)
; Loading "parenscript"
[package anaphora]................................
[package anaphora-basic]..........................
[package anaphora-symbol].........................
[package editor-hints.named-readtables]...........
[package editor-hints.named-readtables]...........
[package parenscript].............................
[package ps-js-symbols]...........................
[package ps-dom1-symbols].........................
[package ps-dom2-symbols].........................
[package ps-window-wd-symbols]....................
[package ps-dom-nonstandard-symbols]..............
[package ps-dhtml-symbols]........................
[package ps-js]...................................
...................
(PARENSCRIPT)
CL-USER> (ql:quickload 'hunchentoot)
To load "hunchentoot":
  Load 1 ASDF system:
    hunchentoot
; Loading "hunchentoot"

(HUNCHENTOOT)
CL-USER> (ql:quickload 'cl-who)
To load "cl-who":
  Load 1 ASDF system:
    cl-who
; Loading "cl-who"

(CL-WHO)
CL-USER> (defpackage :Lee-Sanghyeup (:use :cl :cl-who :hunchentoot :parenscript))
#<PACKAGE "LEE-SANGHYEUP">
CL-USER> (in-package :Lee-Sanghyeup)
#<PACKAGE "LEE-SANGHYEUP">
LEE-SANGHYEUP> (with-html-output (*standard-output* nil :indent t)
       (:html
        (:head
         (:title "K-Lisper's Books")
         )
        (:body
         (:p "K-Lisper's is best!")
         )
        )
       )

<html>
  <head>
    <title>K-Lisper's Books
    </title>
  </head>
  <body>
    <p>K-Lisper's is best!
    </p>
  </body>
</html>
"
<html>
  <head>
    <title>K-Lisper's Books
    </title>
  </head>
  <body>
    <p>K-Lisper's is best!
    </p>
  </body>
</html>"
LEE-SANGHYEUP> (load "html/base-page.lisp")
T
LEE-SANGHYEUP> (load "html/base-page.li2sp")
; Evaluation aborted on #<SB-INT:SIMPLE-FILE-ERROR "~@<Couldn't load ~S: file does not exist.~@:>" {10066EEE83}>.
LEE-SANGHYEUP> standard-page
; Evaluation aborted on #<UNBOUND-VARIABLE STANDARD-PAGE {100686A823}>.
LEE-SANGHYEUP> (load "html/base-page.lisp")
T
LEE-SANGHYEUP> (base-page "title" "body")
; Evaluation aborted on #<SB-KERNEL::DEFMACRO-LAMBDA-LIST-BROKEN-KEY-LIST-ERROR {1006AE1C83}>.
LEE-SANGHYEUP> (defun index-page()
       (standard-page
           (:title "Klisper's Books")
         (:h1 "Top KLisper's Books")
         (:p "We'll wirite the code later..."
         )
         )
       )
INDEX-PAGE
LEE-SANGHYEUP> (index-page)
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">

<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
  <head>
    <meta http-equiv='Content-Type' content='text/html;charset=utf-8' />
    <title>Klisper's Books
    </title>
    <link type='text/css' rel='stylesheet' href='/retro.css' />
  </head>
  <body>
    <div id='header'></div>
    <h1>Top KLisper's Books
    </h1>
    <p>We'll wirite the code later...
    </p>
  </body>
</html>"
LEE-SANGHYEUP> (defun main-page()
  (standard-page (:title "Lee Sang Hyeup")
         (:h1 "article name here")
         (:p "i'll wirite the code later...")
         )
  )
MAIN-PAGE
LEE-SANGHYEUP> (hunchentoot :start (make-instance 'hunchentoot:easy-acceptor :port 8080))
; in: HUNCHENTOOT :START
;     (LEE-SANGHYEUP::HUNCHENTOOT :START
;      (MAKE-INSTANCE 'HUNCHENTOOT:EASY-ACCEPTOR :PORT 8080))
; 
; caught STYLE-WARNING:
;   undefined function: LEE-SANGHYEUP::HUNCHENTOOT
; 
; compilation unit finished
;   Undefined function:
;     HUNCHENTOOT
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION HUNCHENTOOT {10073265A3}>.
LEE-SANGHYEUP> (defpackage :Lee-Sanghyeup (:use :cl :cl-who :hunchentoot :parenscript))
#<PACKAGE "LEE-SANGHYEUP">
LEE-SANGHYEUP> (in-package :Lee-Sanghyeup)
#<PACKAGE "LEE-SANGHYEUP">
LEE-SANGHYEUP> (hunchentoot :start (make-instance 'hunchentoot:easy-acceptor :port 8080))
; Evaluation aborted on #<UNDEFINED-FUNCTION HUNCHENTOOT {10074E0093}>.
LEE-SANGHYEUP> (ql:quickload 'hunchentoot)
To load "hunchentoot":
  Load 1 ASDF system:
    hunchentoot
; Loading "hunchentoot"

(HUNCHENTOOT)
LEE-SANGHYEUP> (hunchentoot :start (make-instance 'hunchentoot:easy-acceptor :port 8080))
; Evaluation aborted on #<UNDEFINED-FUNCTION HUNCHENTOOT {1002D2A2A3}>.
LEE-SANGHYEUP> (require 'hunchentoot)
NIL
LEE-SANGHYEUP> (hunchentoot :start (make-instance 'hunchentoot:easy-acceptor :port 8080))
; Evaluation aborted on #<UNDEFINED-FUNCTION HUNCHENTOOT {1005495AF3}>.
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:acceptor :port 8080))
#<ACCEPTOR (host *, port 8080)>
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/main.htm" 'main-page) *dispatch-table*)
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1005C238DB}>
 DISPATCH-EASY-HANDLERS)
127.0.0.1 - [2020-05-18 19:31:51] "GET / HTTP/1.1" 200 393 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:31:51] "GET /img/made-with-lisp-logo.jpg HTTP/1.1" 200 12583 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:31:51] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:31:55] "GET /main HTTP/1.1" 404 295 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:32:05] "GET /main.htm HTTP/1.1" 404 299 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:33:12] "GET /index.htm HTTP/1.1" 404 300 "https://jangsunjin.tistory.com/?page=6" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/main.html" 'main-page) *dispatch-table*)
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
127.0.0.1 - [2020-05-18 19:33:44] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:33:46] "GET /main HTTP/1.1" 404 295 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:34:49] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (hunchentoot:stop *hunchentoot-server*)
; Evaluation aborted on #<UNBOUND-VARIABLE *HUNCHENTOOT-SERVER* {10029EA0A3}>.
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080))
#<EASY-ACCEPTOR (host *, port 8080)>
127.0.0.1 - [2020-05-18 19:35:19] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:19] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:20] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:21] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:21] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:21] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:21] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/main.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:23] "GET // HTTP/1.1" 404 292 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/main.html" 'main-page) *dispatch-table*)
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002E4184B}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
127.0.0.1 - [2020-05-18 19:35:42] "GET /main HTTP/1.1" 404 295 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:49] "GET /main.html HTTP/1.1" 404 300 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:35:52] "GET /main.htm HTTP/1.1" 404 299 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/main.htm" 'main-page) *dispatch-table*)
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002EAA1CB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002E4184B}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
127.0.0.1 - [2020-05-18 19:36:02] "GET /main.htm HTTP/1.1" 404 299 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:36:03] "GET /main.htm HTTP/1.1" 404 299 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (hunchentoot:define-easy-handler (say-yo :uri "/yo") (name)
  (setf (hunchentoot:content-type*) "text/plain")
  (format nil "Hey~@[ ~A~]!" name))
SAY-YO
127.0.0.1 - [2020-05-18 19:40:06] "GET /yo HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080))
#<EASY-ACCEPTOR (host *, port 8080)>
127.0.0.1 - [2020-05-18 19:40:54] "GET /yo HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:54] "GET /favicon.ico HTTP/1.1" 200 1406 "http://127.0.0.1:8080/yo" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:55] "GET /yo HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:55] "GET /favicon.ico HTTP/1.1" 200 1406 "http://127.0.0.1:8080/yo" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:55] "GET /yo HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:55] "GET /favicon.ico HTTP/1.1" 200 1406 "http://127.0.0.1:8080/yo" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:57] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:40:57] "GET /img/made-with-lisp-logo.jpg HTTP/1.1" 200 12583 "http://127.0.0.1:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:41:00] "GET /yo HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (hunchentoot:define-easy-handler (say-yo :uri "/yo") (name)
  (setf (hunchentoot:content-type*) "text/plain")
  (format nil "Hey~@[ ~A~]!" name))
WARNING: redefining LEE-SANGHYEUP::SAY-YO in DEFUN
SAY-YO
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:easy-handler :port 8080))
127.0.0.1 - [2020-05-18 19:42:34] "GET /hunchentoot HTTP/1.1" 404 302 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:44:56] "GET /yo?name=Dude HTTP/1.1" 404 293 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:48:39] "GET /hunchentoot-doc.html HTTP/1.1" 200 238484 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:48:39] "GET /hunchentoot.gif HTTP/1.1" 200 490 "http://localhost:8080/hunchentoot-doc.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
; Evaluation aborted on #<SB-INT:SIMPLE-READER-PACKAGE-ERROR "The symbol ~S is not external in the ~A package." {100323D0A3}>.
LEE-SANGHYEUP> (hunchentoot:define-easy-handler (say-yo :uri "/") (name)
  (setf (hunchentoot:content-type*) "text/plain")
  (format nil "Hey~@[ ~A~]!" name))
WARNING: redefining LEE-SANGHYEUP::SAY-YO in DEFUN
SAY-YO
127.0.0.1 - [2020-05-18 19:49:07] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:07] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:07] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:07] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:49:08] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/" 'main-page) *dispatch-table*)
)

)
CL-USER> (push (create-prefix-dispatcher "/main.htm" 'main-page) *dispatch-table*)
; in: PUSH (CREATE-PREFIX-DISPATCHER "/main.htm" 'MAIN-PAGE)
;     (SETQ *DISPATCH-TABLE* (CONS #:ITEM *DISPATCH-TABLE*))
; 
; caught WARNING:
;   undefined variable: COMMON-LISP-USER::*DISPATCH-TABLE*

;     (CREATE-PREFIX-DISPATCHER "/main.htm" 'MAIN-PAGE)
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::CREATE-PREFIX-DISPATCHER
; 
; compilation unit finished
;   Undefined function:
;     CREATE-PREFIX-DISPATCHER
;   Undefined variable:
;     *DISPATCH-TABLE*
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION CREATE-PREFIX-DISPATCHER {10062EF033}>.
CL-USER> *dispatch-table*
; Evaluation aborted on #<UNBOUND-VARIABLE *DISPATCH-TABLE* {100659CA83}>.
CL-USER> (ql:quickload 'cl-who)
To load "cl-who":
  Load 1 ASDF system:
    cl-who
; Loading "cl-who"

(CL-WHO)
CL-USER> (ql:quickload 'hunchentoot)
To load "hunchentoot":
  Load 1 ASDF system:
    hunchentoot
; Loading "hunchentoot"

(HUNCHENTOOT)
CL-USER> (ql:quickload 'parenscript)

To load "parenscript":
  Load 1 ASDF system:
    parenscript
; Loading "parenscript"

(PARENSCRIPT)
CL-USER> (defpackage :Lee-Sanghyeup (:use :cl :cl-who :hunchentoot :parenscript))
#<PACKAGE "LEE-SANGHYEUP">
CL-USER> (in-package :Lee-Sanghyeup)
#<PACKAGE "LEE-SANGHYEUP">
LEE-SANGHYEUP> (load "html/base-page.lisp")
T
LEE-SANGHYEUP> *dispatch-table*
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002EAA1CB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002E4184B}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
LEE-SANGHYEUP> (defun main-page()
  (standard-page (:title "Lee Sang Hyeup")
         (:h1 "article name here")
         (:p "i'll wirite the code later...")
         )
  )
WARNING: redefining LEE-SANGHYEUP::MAIN-PAGE in DEFUN
MAIN-PAGE
LEE-SANGHYEUP> (push (create-prefix-dispatcher "/main.htm" 'main-page) *dispatch-table*)
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1007756EEB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002EAA1CB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002E4184B}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080))
#<EASY-ACCEPTOR (host *, port 8080)>
127.0.0.1 - [2020-05-18 19:52:09] "GET / HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:52:09] "GET /favicon.ico HTTP/1.1" 200 1406 "http://localhost:8080/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:52:15] "GET /htm HTTP/1.1" 404 294 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
127.0.0.1 - [2020-05-18 19:52:29] "GET /main.htm HTTP/1.1" 404 299 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
LEE-SANGHYEUP> (hunchentoot:define-easy-handler (say-yo :uri "/") (name)
  (setf (hunchentoot:content-type*) "text/plain")
  (format nil "Hey~@[ ~A~]!" name))
WARNING: redefining LEE-SANGHYEUP::SAY-YO in DEFUN
SAY-YO
LEE-SANGHYEUP> *dispatch-table*
(#<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1007756EEB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002EAA1CB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {1002E4184B}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10029E76AB}>
 #<CLOSURE (LAMBDA (REQUEST) :IN CREATE-PREFIX-DISPATCHER) {10083EFAEB}>
 DISPATCH-EASY-HANDLERS)
LEE-SANGHYEUP> (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080))
#<EASY-ACCEPTOR (host *, port 8080)>
LEE-SANGHYEUP> (hunchentoot:restart (make-instance 'hunchentoot:easy-acceptor :port 8080))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-PACKAGE-ERROR "The symbol ~S is not external in the ~A package." {10078F29D3}>.
LEE-SANGHYEUP> *hunchentoot-server*
; Evaluation aborted on #<UNBOUND-VARIABLE *HUNCHENTOOT-SERVER* {1007ABDD43}>.
LEE-SANGHYEUP> (defparameter *hunchentoot-server* (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port 8080)))
*HUNCHENTOOT-SERVER*
LEE-SANGHYEUP> *hunchentoot-server*
#<EASY-ACCEPTOR (host *, port 8080)>
LEE-SANGHYEUP> (hunchentoot:stop *hunchentoot-server*)
[2020-05-18 19:54:18 [ERROR]] Wake-for-shutdown connect failed: The condition Socket error in "connect": 10049 (요청한 주소는 해당 컨텍스트에서 유효하지 않습니다.) occurred with errno